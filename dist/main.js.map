{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript_project/./src/scripts/movingObject.js","webpack://javascript_project/./src/scripts/setting.js","webpack://javascript_project/./src/scripts/wordgenerator.js","webpack://javascript_project/./src/scripts/human.js","webpack://javascript_project/./src/scripts/projectile.js","webpack://javascript_project/./src/scripts/zombie.js","webpack://javascript_project/./src/scripts/game.js","webpack://javascript_project/./src/scripts/game_view.js","webpack://javascript_project/./src/index.js","webpack://javascript_project/./src/scripts/word.js","webpack://javascript_project/./src/scripts/resources.js"],"sourcesContent":["import {dist} from './util.js';\nconst NORMAL_FAME_TIME_DELTA = 1000/60;\nclass MovingObject{\n    static humanWdith=65;\n    static trashWidth=20;\n    constructor(pos,speed,game){\n        this.pos = pos;\n        this.speed = speed;\n        this.game=game;\n\n\n    }\n    move() {\n        \n        this.pos = [this.pos[0]-this.speed,this.pos[1]];\n    }\n    getCenter(spriteWidth){\n        return this.pos[0]+Math.floor(spriteWidth/2);\n    }\n    isCollidedWith(human,width1,width2){\n        // check if projectile is in the correct lane\n        // projectile 595,650,696\n        // human start 590,650,680\n        const projectileLane = this.pos[1];\n        const humanLane = human.pos[1];\n      \n        // Define the acceptable range for the lane\n        const laneRange = 20;\n        //axis-aligned bounding box(two objects a,b)\n        //if a.x + a.width >=b.x\n        //& (a.x<=b.x+b.width)\n        //&(a.y+a.height>=b.y)\n        //a.y<=(b.y+b.height)\n        if (Math.abs(projectileLane - humanLane) <= laneRange ) {\n          const detection1 = (this.pos[0]+width1>=human.pos[0]);\n          const detection2 = (human.pos[0]+width2>=this.pos[0]);\n          if (detection1 && detection2) {\n            console.log('collision detected')\n            return true;\n          }\n        }\n      \n        return false;\n    }\n\n\n\n}\n\nexport default MovingObject","\nclass Setting {\n    constructor(ctx){\n        this.backgroundImage = new Image();\n        this.imageLoaded = false;\n        this.backgroundImage.onload =()=>{\n            \n            this.imageLoaded = true;\n            // this.drawFrame(ctx);\n        }\n        // this.houseImage =  new Image();\n        this.backgroundImage.src = './images/bg4.0.png';\n        // this.houseImage.src = './images/house1.png';\n        // this.skyImage = new Image();\n        // this.skyImage.src = './images/sky1.png'\n    }\n\n    drawFrame(ctx){\n        if (this.imageLoaded){\n            ctx.drawImage(this.backgroundImage,0,0);\n        }\n        \n        \n        // ctx.drawImage(this.houseImage,10,200,100,100);\n        // ctx.drawImage(this.skyImage,0,10,100,50);\n\n\n\n      \n        }\n    \n    \n}\n\n\n\n\n\n\nexport default Setting\n","const randomWord = 'https://api.api-ninjas.com/v1/randomword'\n\n\nexport async function getRandomWord(){\n  try {\n      const response = await fetch(\"https://random-word-api.vercel.app/api?words=1\")\n      if (response.ok) {\n        const result = await response.json();\n        return result[0];\n      } else {\n        throw response\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n// export async function getRandomWord(){\n//     try {\n//         const response = await fetch(\"https://api.api-ninjas.com/v1/randomword\",{\n//     method: 'GET',\n//     headers: { 'X-Api-Key': '/UnQYwpt2huxOYVHDrgpMQ==JFZmsclMm7gqLBGn'},\n//     contentType: 'application/json',\n//     success: function(result) {\n//         console.log(result);\n//     }})\n//         if (response.ok) {\n//           const result = await response.json();\n//           const word = result.word;\n//           return word\n//         } else {\n//           throw response\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n","import MovingObject from './movingObject.js';\nimport * as Util from './util.js';\nimport Resources from './resources.js';\nimport Word from './word.js';\nimport {getRandomWord} from './wordgenerator.js';\n\nclass Human extends MovingObject {\n    static IMAGE = './images/walkcyclevarious.png';\n    static start =[680,650,590];\n    static startSpeed=.5;\n    static frame = 9;\n    static spriteHeight = 60;\n    static spriteWidth = 65;\n    // need to set up 3 random positions for a human, \n    async setRandomWord(letters=5){\n        let initialWord;\n        // do{\n            initialWord = await getRandomWord();\n            \n        // }while(initialWord.length > letters);\n        this.word=initialWord;\n    }\n\n    constructor (x,y,game){\n        const speed = Human.startSpeed\n    \n        super([x,y],speed,game);\n        this.targeted=false;\n        this.status = 'alive';\n        this.setRandomWord();\n        this.sprite = new Image();\n        this.maxFrame=11;\n        this.minFrame=9;\n        this.width=65;\n        this.height=60;\n        this.centerX = this.pos[0]+Human.spriteWidth/2;\n        this.centerY = this.pos[1]+Human.spriteHeight/2;\n        this.person = Math.floor(Math.random()*7)+1;\n        this.spriteHeight = Human.spriteHeight*this.person;\n        this.frame = Human.frame;\n        this.imageLoaded = false;\n        this.sprite.onload= ()=>{\n            this.imageLoaded=true;\n            // this.drawFrame(ctx);\n        };\n        this.sprite.src = Human.IMAGE;\n\n    }\n\n    getCenterX(){\n        return this.pos[0]+65/2;\n    }\n    getCenterY(){\n        return this.pos[1]+60/2;\n    }\n   drawFrame(ctx) {\n        let [x,y] = this.pos;\n        let personNum = this.person;\n        let frame = this.frame;\n        if (this.imageLoaded ){\n            \n            ctx.drawImage(this.sprite,Human.spriteWidth*frame,\n                Human.spriteHeight*personNum,\n                Human.spriteWidth,\n                Human.spriteHeight,\n                x,\n                y,\n                70,\n                70);\n            this.drawWord(ctx);\n            \n            \n        }\n        \n    }\n\n    drawWord(ctx){\n\n      \n        ctx.fillStyle='white';\n        ctx.font = '20px arial';\n        ctx.fillText(this.word,this.pos[0],this.pos[1]+5);\n    }\n    \n    update(){\n        if (this.frame<this.maxFrame) this.frame++;\n        else this.frame = this.minFrame;\n    }\n\n    move(){\n        let [x,y] = this.pos;\n        if (x>100) this.pos = [this.pos[0]-10,this.pos[1]];\n    }\n\n\n    wordCheck(letter){\n\n        // if (word===this.word.word){\n        //     //trigger death event\n        // } \n            if (letter===this.word[0]){\n                this.word = this.word.slice(1);\n              \n            }\n            if(!this.word.length){\n                this.status='dead';\n                console.log(this);\n            }\n        }\n        \n    \n\n\n   \n\n  \n}\n\nexport default Human;\n\n","import MovingObject from './movingObject.js';\n\nclass Projectile extends MovingObject {\n    static spriteWidth = 20;\n    static spriteHeight = 20;\n    static url = './images/littered_dungeon.png';\n    static frames = [[3,4],[30,4],[60,4],[90,2]];\n    static dimensions = [[20,20],[20,20],[20,20],[30,30]];\n    constructor(y,game){\n        let pos = [100+50,y+20];\n        let speed = 20;\n        super(pos,speed,game)\n        this.randomIndex =Math.floor(Math.random()*4);\n        this.width = Projectile.dimensions[this.randomIndex][0];\n        this.height = Projectile.dimensions[this.randomIndex][1];\n        this.trash = new Image();\n        this.imageLoaded=false \n        this.trash.onload=()=>{\n            this.imageLoaded = true;\n\n        };\n        this.trash.src = Projectile.url;\n        this.number = Math.floor(Math.random()*3)+1;\n      \n    }\n    getCenterX(){\n        return this.pos[0]+20/2;\n    }\n    getCenterY(){\n        return this.pos[1]+20/2;\n    }\n    update(){\n        this.rotation+=this.rotationSpped;\n    }\n    drawFrame(ctx){\n        \n        let [frameX,frameY] = [Projectile.frames[this.randomIndex][0],Projectile.frames[this.randomIndex][1]];\n        let [dimX,dimY] = [Projectile.dimensions[this.randomIndex][0],Projectile.dimensions[this.randomIndex][1]];\n        if(this.imageLoaded){\n            \n            // ctx.drawImage(this.trash,3,4,20,20,this.pos[0],this.pos[1],20,20);\n            ctx.drawImage(this.trash,frameX,frameY,dimX,dimY,this.pos[0],this.pos[1],dimX,dimY);\n            // ctx.rotate(-1);\n            // ctx.drawImage(this.trash,0,0);\n        }\n    }\n    move(){\n        this.pos = [this.pos[0]+40,this.pos[1]];\n    }\n    \n\n\n}\nexport default Projectile;","import Projectile from \"./projectile\";\nimport Game from './game.js';\nclass Zombie{\n    static url = './images/zombie.png';\n    static throwingAnimation=[3,63,130,205,352,407,460,63]; \n    static throwingDimensions=[[50,70],[50,70],[50,70],[50,70],[50,70],[50,70],[68,70],[50,70]];\n    static idleDimensions=[[47,70],[47,70],[47,70],[44,70],[44,70],[44,70]];\n    static idleAnimation=[3,53,102,150,196,243];\n    static idleCol=163;\n    static throwingCol = 320;\n    static idleRow = [229];\n    constructor(y,game){\n        //y position is dependent on zombie lane\n        this.standingIndex=0;\n        this.x = 100;\n        this.y = y;\n        this.game = game;\n        this.sprite = new Image();\n        this.imageLoaded=false;\n        this.sprite.onload=()=>{\n            this.imageLoaded=true;\n        }\n        this.sprite.src = Zombie.url;\n        this.idleAnimation=[1,2,3,4,5,6];\n        this.targets=[];\n        this.killed=[];\n        this.projectile=false;\n        this.projectileThrown=false;\n\n    }\n\n    drawFrame(ctx){\n        if (this.targets.every((target=>target.targeted===true))|| this.targets.length===0){\n            this.drawIdleFrame(ctx);\n        }else if(this.targets.some(target=>target.targeted===false)){\n            console.log(this.targets);\n            console.log(this);\n            this.drawThrowingFrame(ctx);\n        } else{\n            this.drawIdleFrame(ctx);\n        }\n    }\n    throwProjectile(){\n        console.log('throwing');\n        if (this.targets.length > 0){\n            const target = this.targets.shift();\n            this.killed.push(target);\n            this.targets.shift();\n            if(!target.targeted){\n            const trash = new Projectile(this.y,this.game);\n            this.game.add(trash);\n            target.targeted=true;\n            }\n        }\n       \n    }\n    drawThrowingFrame(ctx){\n        let [frameX,frameY] = [Zombie.throwingDimensions[this.standingIndex][0],Zombie.throwingDimensions[this.standingIndex][1]];\n        let [dimensionX, dimensionY] =[Zombie.throwingAnimation[this.standingIndex],Zombie.throwingCol];\n        if(this.imageLoaded){\n            this.standingIndex++;\n            ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n            // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n            \n            if(this.standingIndex>7) {\n                this.throwProjectile();\n                this.standingIndex = 0;\n               }\n            }\n        }\n    drawIdleFrame(ctx){\n        let [frameX,frameY] = [Zombie.idleDimensions[this.standingIndex][0],Zombie.idleDimensions[this.standingIndex][1]]\n        let [dimensionX, dimensionY] =[Zombie.idleAnimation[this.standingIndex],Zombie.idleCol];\n        if(this.imageLoaded){\n                this.standingIndex++;\n                ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n                // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n           \n               if(this.standingIndex>5) this.standingIndex = 0;\n            }\n    }\n    \n\n}\n\nexport default Zombie;","import Human from './human.js';\nimport Setting from './setting.js';\nimport Zombie from './zombie.js';\nimport Projectile from './projectile.js';\nclass Game {\n    static num_humans=20;\n    static DIM_X = 1500;\n    static DIM_Y = 900;\n    constructor(){\n        this.humans = [];\n        this.zombies=[];\n        this.setting = [];\n        this.humanTargets=[];\n        this.addHumans();\n        this.addSetting();\n        this.addZombies();\n        this.trash=[];\n        this.active = false;\n        this.time = 0;\n        document.addEventListener('keydown',event => {\n            //checking key pressed \n           \n            this.checkLetter(event.key);\n            //check if the event.key is equal to any of word[index]\n            //if equal, update the correct letter for all words currently on the screen,\n            // need to only check for humans position is within canvas width\n\n        })\n\n    }\n\n    \n    add(object){\n        if (object instanceof Human) {\n            this.humans.push(object);\n          } else if (object instanceof Projectile ) {\n            this.trash.push(object);\n          } else {\n            throw new Error(\"unknown type of object\");\n          }\n\n    }\n    addZombies(){\n        let position=[575,630,676];\n        let zombie1 = new Zombie(575,this);\n        let zombie2 = new Zombie(630,this);\n        let zombie3 = new Zombie(676,this);\n\n        this.zombies.push(zombie1);\n        this.zombies.push(zombie2);\n        this.zombies.push(zombie3);\n    \n    }\n    \n    addHumans(){\n      \n        const startLane =[590,680,650];\n        const minDistance = 200;\n        for(let i =0;i<Game.num_humans;i++){\n            let positionFound = false;\n            \n            while(!positionFound ){\n                const position = Math.floor(Math.random()*(4000-1500+1))+1500;\n                const y =startLane[Math.floor(Math.random()*startLane.length)];\n                const newHuman = new Human(position+500,y,this);\n                const overLapCheck = this.humans.some((human)=>{\n                    newHuman.isCollidedWith(human,65,65)\n                });\n                if (!overLapCheck){\n                    this.add(newHuman);\n                    positionFound=true;\n                }\n            }\n        }\n    }\n    addSetting(){\n        this.setting.push(new Setting());\n    }\n\n    moveObjects(){\n        this.humans.concat(this.trash).forEach(object =>{\n            object.move();\n        })\n        \n    }\n\n    allObjects(){\n        return [].concat(this.setting,this.humans);\n    }\n    draw(ctx){\n        // 3 human lanes, are 680,650,590\n        //zombie start lanes are 575,630,676\n        //projectile start lanes = 595,650,696\n        ctx.clearRect(0,0,Game.DIM_X,Game.DIM_Y)\n        this.setting[0].drawFrame(ctx);\n        this.humans.forEach((object)=>{\n            object.drawFrame(ctx);\n        });\n        this.zombies.forEach(zombie=>{\n            zombie.drawFrame(ctx);\n            // if zombie status = throw, animate drawthrowingframe, after projectile is thrown\n            //change status to not throw. to revert back to idleanimations\n            //else animate idleframe for zombie\n        });\n        this.trash.forEach(object=>{\n            object.drawFrame(ctx);\n        })\n        }\n    \n    checkLetter(letter){\n        this.humans.filter((human)=>human.pos[0]<1500).forEach(human=>{\n            human.wordCheck(letter);\n        })\n\n    }\n    triggerThrow(){\n        \n    }\n    update(){\n        this.humans.forEach(human=>{\n            human.update();\n        })\n        this.checkforDeadHumans();\n        this.assignHumans();\n        this.checkHits();\n    }\n    // resetProjectileThrown(){\n    //     this.zombies.forEach((zombie)=>{\n    //         zombie.projectileThrown=false;\n    //     });\n    // }\n    //maybe have a total trash for each zombie to throw, so it will just throw\n    //all the trash specific for each humam\n    \n    checkforDeadHumans(){\n        this.humans.forEach(human=>{\n            if (human.status ==='dead'){\n                this.humanTargets.push(human);\n                }\n\n            });\n        }\n        assignHumans(){\n            for(let i =0;i<this.humanTargets.length;i++){\n            let deadHuman =this.humanTargets[i];\n            let deadHumanPosition = this.humanTargets[i].pos[1];\n            switch (true){\n                case(deadHumanPosition-4===676):\n                    //change status for zombie 3 \n                    if (!this.zombies[2].targets.includes(deadHuman)&&!this.zombies[2].killed.includes(deadHuman)){\n                    this.zombies[2].targets.push(deadHuman);\n                    this.zombies[2].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-20===630):\n                    if (!this.zombies[1].targets.includes(deadHuman)&&!this.zombies[1].killed.includes(deadHuman)){\n                    this.zombies[1].targets.push(deadHuman);\n                    this.zombies[1].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-15===575):\n                if (!this.zombies[0].targets.includes(deadHuman)&&!this.zombies[0].killed.includes(deadHuman)){\n                    this.zombies[0].targets.push(deadHuman);\n                    this.zombies[0].projectile=true;\n                    }\n                    break;\n            }\n            }\n        }\n    \n    \n    checkHits(){\n        //check if trash hit dead human\n        for(let i =0;i<this.trash.length;i++){\n            for(let j=0;j<this.humans.length;j++){\n                const trash1 = this.trash[i];\n                const human1 = this.humans[j];\n                if (trash1 && human1){\n                    if(trash1.isCollidedWith(human1,20,65) && human1.pos[0]<1500&&human1.status==='dead'){\n                        this.remove(trash1);\n                        this.remove(human1);\n                    }\n                }\n            }\n        }\n    }\n\n    remove(object){\n\n        if (object instanceof Projectile){\n            this.trash.splice(this.trash.indexOf(object),1);\n        } else if (object instanceof Human){\n            this.humans.splice(this.humans.indexOf(object),1);\n        } else {\n            throw new Error(\"unknown type of object\");\n        }\n    }\n\n    getSetting(){\n        return this.setting[0];\n    }\n}\n\nexport default Game;","\nclass GameView {\n    static alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    constructor(game,ctx,canvas){\n        this.canvas=canvas;\n        this.ctx = ctx;\n        this.game = game;\n        this.lastFrameTime=0;\n        this.frameRate=10;\n        this.frameDelay = 1000/this.frameRate\n        this.index =0;\n        this.menuImage=new Image();\n        this.imageLoaded=false;\n        this.menuImage.onload=()=>{\n            this.imageLoaded=true;\n            this.startMenu();\n        }\n        this.menuImage.src = './images/bg4.0.png';\n        // document.addEventListener('keydown',event => {\n        //     //checking key pressed \n        //     console.log(event.key);\n        //     this.game.checkLetter(event.key);\n        //     //check if the event.key is equal to any of word[index]\n        //     //if equal, update the correct letter for all words currently on the screen,\n        //     // need to only check for humans position is within canvas width\n\n        // })\n        \n    }\n\n    startMenu(){\n        this.ctx.clearRect(0,0,1500,900);\n        console.log(this.menuImage);\n        console.log(this.imageLoaded);\n        if(this.imageLoaded) this.ctx.drawImage(this.menuImage,0,0);\n        this.ctx.drawImage(this.menuImage, 0, 0);\n        const start = document.getElementById('start');\n        let typingindex=0;\n        const startMenuEvent = document.addEventListener('keydown', (event)=>{\n        // if (event.key ==='Backspace'){\n        //     this.menuKeys.pop();\n        // } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n        //     this.menuKeys.push(event.key.toLowerCase());\n        // }\n        console.log(event.key);\n        let letters = document.getElementsByClassName('startLetters');\n            for(let i =typingindex;i<letters.length;i++){\n                let letter=letters[i].innerText;\n                if (letter===event.key){\n                    letters[i].classList.add('typed');\n                    typingindex++;\n                    console.log(typingindex)\n                    break;\n                } \n                else {\n                    typingindex=0;\n                    for(let j=0;j<letters.length;j++)\n                        letters[j].classList.remove('typed');\n                }\n            }\n            \n          \n        let check = document.getElementsByClassName('typed');\n        if(check.length===5) {\n            setTimeout(()=>this.start(),1000);\n        };\n        \n        // Add decorations or text to the menu\n        // let title = document.createElement('h1');\n        // title.innerText='ahhh urRrRR Orrr!!'\n        // title.setAttribute('id','myTitle');\n        })\n    }\n    // startMenuEvent(event){\n    //     if (event.key ==='Backspace'){\n    //         this.menuKeys.pop();\n    //     } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n    //         this.menuKeys.push(event.key.toLowerCase());\n    //     };\n    //     let letters = document.getElementsByClassName('startLetters');\n    //     for(let i =0;i<letters.length;i++){\n    //         let letter=letters[i].innerText;\n    //         console.log(letter);\n    //         if (letter===this.menuKeys[i]){\n    //             letters[i].classList.add('typed');\n    //         } else {\n    //             letters[i].classList.remove('typed');\n    //         }\n    //     }\n    //     let check = document.getElementsByClassName('typed');\n    //     if(check.length===5) {\n    //         setTimeout(()=>this.startGame(),1000);\n    //     }\n    // }\n    modeSelection(){\n        this.menuKeys=[];\n        let navbar = document.getElementById('navBar')\n        navbar.style.display='none'\n        let modes = document.getElementById('modeSelection')\n        modes.style.display='block';\n        document.removeEventListener('keydown',this.startMenuEvent);\n        document.addEventListener('keydown',event=>{\n            if (event.key ==='Backspace'){\n                this.menuKeys.pop();\n            } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n                this.menuKeys.push(event.key.toLowerCase());\n            };\n            \n            let sletters = document.getElementsByClassName('sLetters');\n            let aletters = document.getElementsByClassName('aLetters');\n            console.log(this.menuKeys);\n            for(let i=0;i<this.menuKeys.length;i++){\n                if (this.menuKeys[i]===sletters[i].innerText){\n                    sletters[i].classList.add('typed');\n                } else {\n                    sletters[i].classList.remove('typed');\n                }\n                if(this.menuKeys[i]===aletters[i].innerText){\n                    aletters[i].classList.add('typed');\n                }else {\n                    aletters[i].classList.remove('typed');\n                }\n            }\n            let check = document.getElementsByClassName('typed');\n            if(check.length===6) {\n                console.log(arcade);\n            } else if(check.length===8){\n                console.log(survival);\n            }\n        })\n    }\n    start(){\n        let navbar = document.getElementById('navBar')\n        let title = document.getElementById('myTitle')\n        navbar.style.display='none'\n        title.style.display='none'\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    animate(currentTime=0){\n     \n     const elapsed = currentTime - this.lastFrameTime;\n        if (elapsed > this.frameDelay){\n            this.lastFrameTime=currentTime\n            this.game.moveObjects();\n            this.game.update();\n            this.game.draw(this.ctx);\n            // this.game.update();\n            // this.game.moveHumans();\n        }\n        requestAnimationFrame(this.animate.bind(this));\n    };\n   \n}\nexport default GameView;","\n// let game = document.getElementById('game');\n// game.width=500;\n// game.height=500;\n// const ctx = game.getContext(\"2d\");\n// ctx.fillStyle=\"black\";\n// ctx.fillRect(0,0,500,500);\n// import wordgenerator from \"./scripts\"\nimport {getRandomWord} from './scripts/wordgenerator.js';\nimport MovingObject from './scripts/movingObject.js';\nimport Setting from './scripts/setting.js';\nimport Human from './scripts/human.js';\nimport Game from \"./scripts/game.js\"\nimport Resource from './scripts/resources.js'\nimport GameView from \"./scripts/game_view.js\"\nimport Projectile from './scripts/projectile.js'\nimport Word from './scripts/word.js';\n\nwindow.Human = Human;\nwindow.MovingObject = MovingObject;\nwindow.Setting = Setting;\nwindow.Word = Word;\ndocument.addEventListener(\"DOMContentLoaded\", () => { \n\n  \n    // const word = getRandomWord();\n    // console.log(word);\n    let canvas= document.getElementById('game');\n    const ctx = canvas.getContext(\"2d\");\n    const imageUrls = ['./images/bg.png',\n    './images/grass_15.png',\n    './images/house1.png',\n    './images/walkcyclevarious.png',\n    './images/wireframe.png'];\n    let resources = new Resource(imageUrls);\n    let setting = new Setting(ctx);\n    // setting.drawFrame(ctx);\n    canvas.width = 1500\n    canvas.height = 900\n\n    // let trash = new Projectile(ctx);\n    // trash.drawFrame(ctx);\n    \n    // setting.drawFrame(ctx);\n    // let game = new Game();\n    // let gameview = new GameView(game,ctx).start();\n    const game = new Game();\n    console.log(game);\n    new GameView(game,ctx,canvas);\n  \n\n    // setting.width = 1000;\n    // setting.height = 500;\n    \n    // //code to be put in game class\n    // let humans=[]\n    // let human1 = new Human(ctx);\n    // human1.drawFrame(ctx);\n  \n    // let human2 = new Human();\n    // human1.animate(ctx,5)\n    // human1.animate(ctx,5);\n    // human2.animate(ctx,5);\n  });\n","import {getRandomWord} from './wordgenerator.js';\nclass Word {\n\n    async wordCheck(){\n        let initialWord;\n        do{\n            initialWord = await getRandomWord();\n            \n        }while(initialWord.length>10);\n        return initialWord;\n    }\n\n    \n    constructor(){       \n        this.wordCheck().then(result=>{\n            this.word=result;\n        })\n\n    }\n    \n    getWord(){\n        return this.word;\n    }\n    \n}\nexport default Word;","\nclass Resources{\n    constructor(imageUrls){\n        this.resourceCache = {};\n        this.loading=[];\n        this.readyCallbacks=[];\n        imageUrls.forEach(url=>{\n            this.load(url);\n        })\n    }\n\n    load(url){\n        this._load(url);\n    }\n\n    _load(url){\n        if (this.resourceCache[url]){\n            return this.resourceCache[url];\n        } else {\n            this.loading.push(url);\n            let img = new Image();\n            img.onload = ()=> {\n                this.resourceCache[url] = img;\n\n                if (this.isReady()){\n                    this.readyCallbacks.forEach(func => {\n                        func();\n                    })\n                }\n            };\n            this.resourceCache[url] = false;\n            img.src = url; \n        }\n    }\n    get(url){\n        return this.resourceCache[url];\n    }\n\n    isReady(){\n        let ready = true;\n        for (var k in this.resourceCache){\n            if(this.resourceCache.hasOwnProperty.call(this.resourceCache,k) && !this.resourceCache[k]){\n                ready = false;\n            }\n        }\n        return ready;\n    }\n\n    onReady(func){\n        this.readyCallbacks.push(func);\n    }\n\n\n}\nexport default Resources;"],"names":["static","constructor","pos","speed","game","this","move","getCenter","spriteWidth","Math","floor","isCollidedWith","human","width1","width2","projectileLane","humanLane","abs","detection1","detection2","console","log","ctx","backgroundImage","Image","imageLoaded","onload","src","drawFrame","drawImage","async","getRandomWord","response","fetch","ok","json","error","Human","MovingObject","initialWord","word","x","y","super","startSpeed","targeted","status","setRandomWord","sprite","maxFrame","minFrame","width","height","centerX","centerY","spriteHeight","person","random","frame","IMAGE","getCenterX","getCenterY","personNum","drawWord","fillStyle","font","fillText","update","wordCheck","letter","slice","length","Projectile","randomIndex","dimensions","trash","url","number","rotation","rotationSpped","frameX","frameY","frames","dimX","dimY","Zombie","standingIndex","idleAnimation","targets","killed","projectile","projectileThrown","every","target","drawIdleFrame","some","drawThrowingFrame","throwProjectile","shift","push","add","throwingDimensions","dimensionX","dimensionY","throwingAnimation","throwingCol","idleDimensions","idleCol","Game","humans","zombies","setting","humanTargets","addHumans","addSetting","addZombies","active","time","document","addEventListener","event","checkLetter","key","object","Error","zombie1","zombie2","zombie3","startLane","i","num_humans","positionFound","position","newHuman","overLapCheck","Setting","moveObjects","concat","forEach","allObjects","draw","clearRect","DIM_X","DIM_Y","zombie","filter","triggerThrow","checkforDeadHumans","assignHumans","checkHits","deadHuman","deadHumanPosition","includes","j","trash1","human1","remove","splice","indexOf","getSetting","GameView","canvas","lastFrameTime","frameRate","frameDelay","index","menuImage","startMenu","getElementById","typingindex","letters","getElementsByClassName","innerText","classList","setTimeout","start","modeSelection","menuKeys","style","display","removeEventListener","startMenuEvent","pop","alphabet","toUpperCase","toLowerCase","sletters","aletters","check","arcade","survival","navbar","title","requestAnimationFrame","animate","bind","currentTime","arguments","undefined","window","Word","then","result","getWord","getContext","imageUrls","resourceCache","loading","readyCallbacks","load","_load","img","isReady","func","get","ready","k","hasOwnProperty","call","onReady"],"sourceRoot":""}