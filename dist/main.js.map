{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript_project/./src/scripts/movingObject.js","webpack://javascript_project/./src/scripts/setting.js","webpack://javascript_project/./src/scripts/human.js","webpack://javascript_project/./src/scripts/projectile.js","webpack://javascript_project/./src/scripts/zombie.js","webpack://javascript_project/./src/scripts/game.js","webpack://javascript_project/./src/scripts/game_view.js","webpack://javascript_project/./src/scripts/wordgenerator.js","webpack://javascript_project/./src/index.js","webpack://javascript_project/./src/scripts/word.js","webpack://javascript_project/./src/scripts/resources.js"],"sourcesContent":["import {dist} from './util.js';\nconst NORMAL_FAME_TIME_DELTA = 1000/60;\nclass MovingObject{\n    static humanWdith=65;\n    static trashWidth=20;\n    constructor(pos,speed,game){\n        this.pos = pos;\n        this.speed = speed;\n        this.game=game;\n\n\n    }\n    move() {\n        \n        this.pos = [this.pos[0]-this.speed,this.pos[1]];\n    }\n    getCenter(spriteWidth){\n        return this.pos[0]+Math.floor(spriteWidth/2);\n    }\n    isCollidedWith(human,width1,width2){\n        // check if projectile is in the correct lane\n        // projectile 595,650,696\n        // human start 590,650,680\n        const projectileLane = this.pos[1];\n        const humanLane = human.pos[1];\n      \n        // Define the acceptable range for the lane\n        const laneRange = 20;\n        //axis-aligned bounding box(two objects a,b)\n        //if a.x + a.width >=b.x\n        //& (a.x<=b.x+b.width)\n        //&(a.y+a.height>=b.y)\n        //a.y<=(b.y+b.height)\n        if (Math.abs(projectileLane - humanLane) <= laneRange ) {\n          const detection1 = (this.pos[0]+width1>=human.pos[0]);\n          const detection2 = (human.pos[0]+width2>=this.pos[0]);\n          if (detection1 && detection2) {\n            console.log('collision detected')\n            return true;\n          }\n        }\n      \n        return false;\n    }\n\n\n\n}\n\nexport default MovingObject","\nclass Setting {\n    constructor(ctx){\n        this.backgroundImage = new Image();\n        this.imageLoaded = false;\n        this.backgroundImage.onload =()=>{\n            \n            this.imageLoaded = true;\n            // this.drawFrame(ctx);\n        }\n        // this.houseImage =  new Image();\n        this.backgroundImage.src = './images/bg4.0.png';\n        // this.houseImage.src = './images/house1.png';\n        // this.skyImage = new Image();\n        // this.skyImage.src = './images/sky1.png'\n    }\n\n    drawFrame(ctx){\n        if (this.imageLoaded){\n            ctx.drawImage(this.backgroundImage,0,0);\n        }\n        \n        \n        // ctx.drawImage(this.houseImage,10,200,100,100);\n        // ctx.drawImage(this.skyImage,0,10,100,50);\n\n\n\n      \n        }\n    \n    \n}\n\n\n\n\n\n\nexport default Setting\n","import MovingObject from './movingObject.js';\nimport * as Util from './util.js';\nimport Resources from './resources.js';\nimport Word from './word.js';\nimport * as RandomWord from './wordgenerator.js';\n\nclass Human extends MovingObject {\n    static IMAGE = './images/walkcyclevarious.png';\n    static start =[680,650,590];\n    static startSpeed=5;\n    static frame = 9;\n    static spriteHeight = 60;\n    static spriteWidth = 65;\n    // need to set up 3 random positions for a human, \n    async setRandomWord(letters=5){\n        let initialWord;\n        // do{\n            initialWord = await getRandomWord();\n            \n        // }while(initialWord.length > letters);\n        this.word=initialWord;\n    }\n\n    constructor (x,y,game){\n        const speed = Human.startSpeed\n    \n        super([x,y],speed,game);\n        this.score=100;\n        this.targeted=false;\n        this.status = 'alive';\n        this.setRandomWord();\n        this.sprite = new Image();\n        this.maxFrame=11;\n        this.minFrame=9;\n        this.width=65;\n        this.height=60;\n        this.centerX = this.pos[0]+Human.spriteWidth/2;\n        this.centerY = this.pos[1]+Human.spriteHeight/2;\n        this.person = Math.floor(Math.random()*7)+1;\n        this.spriteHeight = Human.spriteHeight*this.person;\n        this.frame = Human.frame;\n        this.imageLoaded = false;\n        this.sprite.onload= ()=>{\n            this.imageLoaded=true;\n            // this.drawFrame(ctx);\n        };\n        this.sprite.src = Human.IMAGE;\n\n    }\n\n    getCenterX(){\n        return this.pos[0]+65/2;\n    }\n    getCenterY(){\n        return this.pos[1]+60/2;\n    }\n   drawFrame(ctx) {\n        let [x,y] = this.pos;\n        let personNum = this.person;\n        let frame = this.frame;\n        if (this.imageLoaded ){\n            \n            ctx.drawImage(this.sprite,Human.spriteWidth*frame,\n                Human.spriteHeight*personNum,\n                Human.spriteWidth,\n                Human.spriteHeight,\n                x,\n                y,\n                70,\n                70);\n            this.drawWord(ctx);\n            \n            \n        }\n        \n    }\n\n    drawWord(ctx){\n\n      \n        ctx.fillStyle='white';\n        ctx.font = '20px arial';\n        ctx.fillText(this.word,this.pos[0],this.pos[1]+5);\n    }\n    \n    update(){\n        if (this.frame<this.maxFrame) this.frame++;\n        else this.frame = this.minFrame;\n    }\n\n    move(){\n        // setInterval(()=>{\n        //     if (this.speed>\n        // })\n        let [x,y] = this.pos;\n        if (x>100) this.pos = [this.pos[0]-10,this.pos[1]];\n    }\n\n\n    wordCheck(letter){\n\n        // if (word===this.word.word){\n        //     //trigger death event\n        // } \n            if (letter===this.word[0]){\n                this.word = this.word.slice(1);\n              \n            }\n            if(!this.word.length){\n                this.status='dead';\n                console.log(this);\n            }\n        }\n        \n    \n\n\n   \n\n  \n}\n\nexport default Human;\n\n","import MovingObject from './movingObject.js';\n\nclass Projectile extends MovingObject {\n    static spriteWidth = 20;\n    static spriteHeight = 20;\n    static url = './images/littered_dungeon.png';\n    static frames = [[3,4],[30,4],[60,4],[90,2]];\n    static dimensions = [[20,20],[20,20],[20,20],[30,30]];\n    constructor(y,game){\n        let pos = [100+50,y+20];\n        let speed = 20;\n        super(pos,speed,game)\n        this.randomIndex =Math.floor(Math.random()*4);\n        this.width = Projectile.dimensions[this.randomIndex][0];\n        this.height = Projectile.dimensions[this.randomIndex][1];\n        this.trash = new Image();\n        this.imageLoaded=false \n        this.trash.onload=()=>{\n            this.imageLoaded = true;\n\n        };\n        this.trash.src = Projectile.url;\n        this.number = Math.floor(Math.random()*3)+1;\n      \n    }\n    getCenterX(){\n        return this.pos[0]+20/2;\n    }\n    getCenterY(){\n        return this.pos[1]+20/2;\n    }\n    update(){\n        this.rotation+=this.rotationSpped;\n    }\n    drawFrame(ctx){\n        \n        let [frameX,frameY] = [Projectile.frames[this.randomIndex][0],Projectile.frames[this.randomIndex][1]];\n        let [dimX,dimY] = [Projectile.dimensions[this.randomIndex][0],Projectile.dimensions[this.randomIndex][1]];\n        if(this.imageLoaded){\n            \n            // ctx.drawImage(this.trash,3,4,20,20,this.pos[0],this.pos[1],20,20);\n            ctx.drawImage(this.trash,frameX,frameY,dimX,dimY,this.pos[0],this.pos[1],dimX,dimY);\n            // ctx.rotate(-1);\n            // ctx.drawImage(this.trash,0,0);\n        }\n    }\n    move(){\n        this.pos = [this.pos[0]+40,this.pos[1]];\n    }\n    \n\n\n}\nexport default Projectile;","import Projectile from \"./projectile\";\nimport Game from './game.js';\nclass Zombie{\n    static url = './images/zombie.png';\n    static throwingAnimation=[3,63,130,205,352,407,460,63]; \n    static throwingDimensions=[[50,70],[50,70],[50,70],[50,70],[50,70],[50,70],[68,70],[50,70]];\n    static idleDimensions=[[47,70],[47,70],[47,70],[44,70],[44,70],[44,70]];\n    static idleAnimation=[3,53,102,150,196,243];\n    static idleCol=163;\n    static throwingCol = 320;\n    static idleRow = [229];\n    constructor(y,game){\n        //y position is dependent on zombie lane\n        this.standingIndex=0;\n        this.x = 100;\n        this.y = y;\n        this.game = game;\n        this.sprite = new Image();\n        this.imageLoaded=false;\n        this.sprite.onload=()=>{\n            this.imageLoaded=true;\n        }\n        this.sprite.src = Zombie.url;\n        this.idleAnimation=[1,2,3,4,5,6];\n        this.targets=[];\n        this.killed=[];\n        this.projectile=false;\n        this.projectileThrown=false;\n\n    }\n\n    drawFrame(ctx){\n        if (this.targets.every((target=>target.targeted===true))|| this.targets.length===0){\n            this.drawIdleFrame(ctx);\n        }else if(this.targets.some(target=>target.targeted===false)){\n            this.drawThrowingFrame(ctx);\n        } else{\n            this.drawIdleFrame(ctx);\n        }\n    }\n    throwProjectile(){\n\n        if (this.targets.length > 0){\n            const target = this.targets.shift();\n            this.killed.push(target);\n            this.targets.shift();\n            if(!target.targeted){\n            const trash = new Projectile(this.y,this.game);\n            this.game.add(trash);\n            target.targeted=true;\n            }\n        }\n       \n    }\n    drawThrowingFrame(ctx){\n        let [frameX,frameY] = [Zombie.throwingDimensions[this.standingIndex][0],Zombie.throwingDimensions[this.standingIndex][1]];\n        let [dimensionX, dimensionY] =[Zombie.throwingAnimation[this.standingIndex],Zombie.throwingCol];\n        if(this.imageLoaded){\n            this.standingIndex++;\n            ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n            // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n            \n            if(this.standingIndex>7) {\n                this.throwProjectile();\n                this.standingIndex = 0;\n               }\n            }\n        }\n    drawIdleFrame(ctx){\n        let [frameX,frameY] = [Zombie.idleDimensions[this.standingIndex][0],Zombie.idleDimensions[this.standingIndex][1]]\n        let [dimensionX, dimensionY] =[Zombie.idleAnimation[this.standingIndex],Zombie.idleCol];\n        if(this.imageLoaded){\n                this.standingIndex++;\n                ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n                // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n           \n               if(this.standingIndex>5) this.standingIndex = 0;\n            }\n    }\n    \n\n}\n\nexport default Zombie;","import Human from './human.js';\nimport Setting from './setting.js';\nimport Zombie from './zombie.js';\nimport Projectile from './projectile.js';\nclass Game {\n    static num_humans=20;\n    static DIM_X = 1500;\n    static DIM_Y = 900;\n    constructor(){\n\n        this.score=0;\n        this.humans=[];\n        this.zombies=[];\n        this.setting = [];\n        this.humanTargets=[];\n        this.addHumans();\n        this.addSetting();\n        this.addZombies();\n        this.trash=[];\n        this.active = false;\n        this.time = 0;\n        this.gameOver=false;\n        document.addEventListener('keydown',event => {\n            //checking key pressed \n           \n            this.checkLetter(event.key);\n            //check if the event.key is equal to any of word[index]\n            //if equal, update the correct letter for all words currently on the screen,\n            // need to only check for humans position is within canvas width\n\n        })\n\n    }\n\n    add(object){\n        if (object instanceof Human) {\n            this.humans.push(object);\n          } else if (object instanceof Projectile ) {\n            this.trash.push(object);\n          } else {\n            throw new Error(\"unknown type of object\");\n          }\n\n    }\n\n\n    addZombies(){\n        let position=[575,630,676];\n        let zombie1 = new Zombie(575,this);\n        let zombie2 = new Zombie(630,this);\n        let zombie3 = new Zombie(676,this);\n\n        this.zombies.push(zombie1);\n        this.zombies.push(zombie2);\n        this.zombies.push(zombie3);\n    \n    }\n    \n    addHumans(){\n      \n        const startLane =[590,680,650];\n        const minDistance = 200;\n        for(let i =0;i<Game.num_humans;i++){\n            let positionFound = false;\n            \n            while(!positionFound ){\n                const position = Math.floor(Math.random()*(4000-1500+1))+1500;\n                const y =startLane[Math.floor(Math.random()*startLane.length)];\n                const newHuman = new Human(position,y,this);\n                    this.add(newHuman);\n                    positionFound=true;\n                }\n            \n        }\n    }\n    addSetting(){\n        this.setting.push(new Setting());\n    }\n\n    moveObjects(){\n        this.humans.concat(this.trash).forEach(object =>{\n            object.move();\n        })\n        if (this.humans.some(human=>human.pos[0]<=150))this.gameOver=true;\n        \n    }\n\n    allObjects(){\n        return [].concat(this.setting,this.humans);\n    }\n    draw(ctx){\n        // 3 human lanes, are 680,650,590\n        //zombie start lanes are 575,630,676\n        //projectile start lanes = 595,650,696\n        ctx.clearRect(0,0,Game.DIM_X,Game.DIM_Y)\n        this.setting[0].drawFrame(ctx);\n        this.humans.forEach((object)=>{\n            object.drawFrame(ctx);\n        });\n        this.zombies.forEach(zombie=>{\n            zombie.drawFrame(ctx);\n            // if zombie status = throw, animate drawthrowingframe, after projectile is thrown\n            //change status to not throw. to revert back to idleanimations\n            //else animate idleframe for zombie\n        });\n        this.trash.forEach(object=>{\n            object.drawFrame(ctx);\n        })\n        }\n    \n    checkLetter(letter){\n        this.humans.filter((human)=>human.pos[0]<1500).forEach(human=>{\n            human.wordCheck(letter);\n        })\n\n    }\n    triggerThrow(){\n        \n    }\n    checkForLoss(){\n        this.humans.some(human=>human.pos[0]<150);\n    }\n    update(){\n        this.humans.forEach(human=>{\n            human.update();\n        })\n        this.checkforDeadHumans();\n        this.assignHumans();\n        this.checkHits();\n        if (this.gameOver){\n\n        }\n    }\n    // resetProjectileThrown(){\n    //     this.zombies.forEach((zombie)=>{\n    //         zombie.projectileThrown=false;\n    //     });\n    // }\n    //maybe have a total trash for each zombie to throw, so it will just throw\n    //all the trash specific for each humam\n    \n    checkforDeadHumans(){\n        this.humans.forEach(human=>{\n            if (human.status ==='dead'){\n                this.humanTargets.push(human);\n                }\n\n            });\n        }\n        assignHumans(){\n            for(let i =0;i<this.humanTargets.length;i++){\n            let deadHuman =this.humanTargets[i];\n            let deadHumanPosition = this.humanTargets[i].pos[1];\n            switch (true){\n                case(deadHumanPosition-4===676):\n                    //change status for zombie 3 \n                    if (!this.zombies[2].targets.includes(deadHuman)&&!this.zombies[2].killed.includes(deadHuman)){\n                    this.zombies[2].targets.push(deadHuman);\n                    this.zombies[2].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-20===630):\n                    if (!this.zombies[1].targets.includes(deadHuman)&&!this.zombies[1].killed.includes(deadHuman)){\n                    this.zombies[1].targets.push(deadHuman);\n                    this.zombies[1].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-15===575):\n                if (!this.zombies[0].targets.includes(deadHuman)&&!this.zombies[0].killed.includes(deadHuman)){\n                    this.zombies[0].targets.push(deadHuman);\n                    this.zombies[0].projectile=true;\n                    }\n                    break;\n            }\n            }\n        }\n    \n    \n    checkHits(){\n        //check if trash hit dead human\n        for(let i =0;i<this.trash.length;i++){\n            for(let j=0;j<this.humans.length;j++){\n                const trash1 = this.trash[i];\n                const human1 = this.humans[j];\n                if (trash1 && human1){\n                    if(trash1.isCollidedWith(human1,20,65) && human1.pos[0]<1500&&human1.status==='dead'){\n                        this.remove(trash1);\n                        this.remove(human1);\n                    }\n                }\n            }\n        }\n    }\n\n    remove(object){\n        console.log('removal in process');\n        if (object instanceof Projectile){\n            this.trash.splice(this.trash.indexOf(object),1);\n        } else if (object instanceof Human){\n            this.humans.splice(this.humans.indexOf(object),1);\n            this.score+=100;\n        } else {\n            throw new Error(\"unknown type of object\");\n        }\n    }\n\n    getSetting(){\n        return this.setting[0];\n    }\n    restartObjects(){\n        this.gameOver=false;\n        this.humans = [];\n        this.trash=[];\n        this.zombies=[];\n        this.addZombies();\n        this.addHumans();\n    }\n}\n\nexport default Game;","import Game from \"./game.js\"\nclass GameView {\n    static alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    constructor(game,ctx,canvas){\n        this.canvas=canvas;\n        this.ctx = ctx;\n        this.game = game;\n        this.lastFrameTime=0;\n        this.frameRate=10;\n        this.frameDelay = 1000/this.frameRate\n        this.index =0;\n        this.menuImage=new Image();\n        this.imageLoaded=false;\n        this.menuImage.onload=()=>{\n            this.imageLoaded=true;\n            this.startMenu();\n        }\n        this.menuImage.src = './images/bg4.0.png';\n        this.typingindex=0;\n        this.againIndex=0;\n        this.returnIndex=0;\n        this.yesIndex=0;\n        this.noIndex=0;\n        this.yes = ['y','e','s'];\n        this.no = ['n','o'];\n        const eventListener = document.addEventListener('keydown', (event)=>{\n            // if (event.key ==='Backspace'){\n            //     this.menuKeys.pop();\n            // } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n            //     this.menuKeys.push(event.key.toLowerCase());\n            // \n            console.log(event.key);\n            let letters = document.getElementsByClassName('startLetters');\n            for(let i =this.typingindex;i<letters.length;i++){\n                let letter=letters[i].innerText;\n                if (letter===event.key){\n                    letters[i].classList.add('typed');\n                    this.typingindex++;\n                    break;\n                } \n                else {\n                    this.typingindex=0;\n                    for(let j=0;j<letters.length;j++)\n                        letters[j].classList.remove('typed');\n                }\n            }\n            \n          \n            // };\n            let againLetters =document.getElementsByClassName('againLetters');\n            let returnLetters = document.getElementsByClassName('returnLetters');\n            \n            switch(this.yesIndex){\n                case(0):\n                    if(this.yes.indexOf(event.key)===0) {\n                        againLetters[this.yesIndex].classList.add('typed')\n                        this.yesIndex+=1\n                    };\n                    \n                    break;\n                case(1):\n                    if(this.yes.indexOf(event.key)===1) {\n                    againLetters[this.yesIndex].classList.add('typed')\n                    this.yesIndex+=1;\n                    }\n                    break;\n                case(2):\n                    this.yesIndex=0;\n                    if(this.yes.indexOf(event.key)===2) {\n                    againLetters[2].classList.add('typed')\n                    setTimeout(()=>this.restart(),3000);\n                    }\n                    break;\n            }\n            switch(this.noIndex){\n                case(0):\n                    if(this.no.indexOf(event.key)===0) {\n                        returnLetters[this.noIndex].classList.add('typed');\n                        this.noIndex+=1\n                    };\n                    break;\n                case(1):\n                    console.log(event.key===this.no[1]);\n                    this.noIndex=0;\n                    if(this.no.indexOf(event.key)===1) {\n                    returnLetters[1].classList.add('typed');\n                    this.returnToMenu();\n                    }\n                    break;\n              \n            }\n            // for(let i =this.againIndex;i<againLetters.length;i++){\n            //     let letter=againLetters[i].innerText;\n            //     if (letter===event.key){\n            //         againLetters[i].classList.add('typed');\n            //         this.againIndex++;\n            //         break;\n            //     } \n            //     else {\n            //         this.againIndex=0;\n            //         for(let j=0;j<againLetters.length;j++)\n            //         againLetters[j].classList.remove('typed');\n            //     }\n            // }\n            // for(let i =this.returnIndex;i< returnLetters.length;i++){\n            //     let letter=returnLetters[i].innerText;\n            //     if (letter===event.key){\n            //         returnLetters[i].classList.add('typed');\n            //         this.returnIndex++;\n               \n            //         break;\n            //     } \n            //     else {\n            //         this.returnIndex=0;\n            //         for(let j=0;j<returnLetters.length;j++)\n            //             returnLetters[j].classList.remove('typed');\n            //     }\n            // }\n            let check = document.getElementsByClassName('typed');\n            if(check.length===5&&check[0].innerText==='s') {\n                setTimeout(()=>this.start(),1000);\n                this.typingindex=0;\n            }\n            // else if(check.length===2&&check[0].innerText==='n'){\n            //     this.startMenu();\n            //     this.returnIndex=0;\n            // }else if(check.length===3&&check[0].innerText==='y'){\n            //     setTimeout(()=>this.restart(),1000);\n            //     this.againIndex=0;\n            // }\n        })\n        // document.addEventListener('keydown',event => {\n        //     //checking key pressed \n        //     console.log(event.key);\n        //     this.game.checkLetter(event.key);\n        //     //check if the event.key is equal to any of word[index]\n        //     //if equal, update the correct letter for all words currently on the screen,\n        //     // need to only check for humans position is within canvas width\n\n        // })\n        \n    }\n    clearTyped(classname){\n        let remove = document.getElementsByClassName(classname);\n        for(let i =0;i<remove.length;i++){\n            remove[i].classList.remove('typed');\n        }\n    }\n    startMenu(){\n        this.ctx.clearRect(0,0,1500,900);\n        this.ctx.drawImage(this.menuImage,0,0);\n\n        \n        // this.clearTyped('againLetters');\n        // this.clearTyped('returnLetters');\n        // let typingindex=0;\n        // let againIndex=0;\n        // let returnIndex=0;\n    //     const startMenuEvent = document.addEventListener('keydown', (event)=>{\n    //     // if (event.key ==='Backspace'){\n    //     //     this.menuKeys.pop();\n    //     // } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n    //     //     this.menuKeys.push(event.key.toLowerCase());\n    //     // \n\n    //     let letters = document.getElementsByClassName('startLetters');\n    //     for(let i =typingindex;i<letters.length;i++){\n    //         let letter=letters[i].innerText;\n    //         if (letter===event.key){\n    //             letters[i].classList.add('typed');\n    //             typingindex++;\n\n    //             break;\n    //         } \n    //         else {\n    //             typingindex=0;\n    //             for(let j=0;j<letters.length;j++)\n    //                 letters[j].classList.remove('typed');\n    //         }\n    //     }\n        \n      \n    //     // };\n    //     let againLetters =document.getElementsByClassName('againLetters');\n    //     let returnLetters = document.getElementsByClassName('returnLetters');\n   \n\n    //     for(let i =againIndex;i<againLetters.length;i++){\n    //         let letter=againLetters[i].innerText;\n    //         if (letter===event.key){\n    //             againLetters[i].classList.add('typed');\n    //             againIndex++;\n    //             break;\n    //         } \n    //         else {\n    //             againIndex=0;\n    //             for(let j=0;j<againLetters.length;j++)\n    //             againLetters[j].classList.remove('typed');\n    //         }\n    //     }\n    //     for(let i =returnIndex;i< returnLetters.length;i++){\n    //         let letter=returnLetters[i].innerText;\n    //         if (letter===event.key){\n    //             returnLetters[i].classList.add('typed');\n    //             returnIndex++;\n           \n    //             break;\n    //         } \n    //         else {\n    //             returnIndex=0;\n    //             for(let j=0;j<returnLetters.length;j++)\n    //                 returnLetters[j].classList.remove('typed');\n    //         }\n    //     }\n    //     let check = document.getElementsByClassName('typed');\n    //     if(check.length===5&&check[0].innerText==='s') {\n    //         setTimeout(()=>this.start(),1000);\n    //     }else if(check.length===2&&check[0].innerText==='n'){\n    //         this.startMenu();\n    //     }else if(check.length===3&&check[0].innerText==='y'){\n    //         setTimeout(()=>this.restart(),1000);\n    //     }\n    // })\n    }\n    returnToMenu(){\n        window.location.reload();\n    }\n       \n    modeSelection(){\n        this.menuKeys=[];\n        let navbar = document.getElementById('navBar')\n        navbar.style.display='none';\n        let modes = document.getElementById('modeSelection')\n        modes.style.display='block';\n        document.addEventListener('keydown',event=>{\n            if (event.key ==='Backspace'){\n                this.menuKeys.pop();\n            } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n                this.menuKeys.push(event.key.toLowerCase());\n            };\n            \n            let sletters = document.getElementsByClassName('sLetters');\n            let aletters = document.getElementsByClassName('aLetters');\n            for(let i=0;i<this.menuKeys.length;i++){\n                if (this.menuKeys[i]===sletters[i].innerText){\n                    sletters[i].classList.add('typed');\n                } else {\n                    sletters[i].classList.remove('typed');\n                }\n                if(this.menuKeys[i]===aletters[i].innerText){\n                    aletters[i].classList.add('typed');\n                }else {\n                    aletters[i].classList.remove('typed');\n                }\n            }\n            let check = document.getElementsByClassName('typed');\n            if(check.length===6) {\n                console.log(arcade);\n            } else if(check.length===8){\n                console.log(survival);\n            }\n        })\n    }\n    start(){\n        let navbar = document.getElementById('navBar')\n        let title = document.getElementById('myTitle')\n        navbar.style.display='none'\n        title.style.display='none'\n        \n\n\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    over(){\n        //remove all previoous typed elements\n        this.clearTyped('againLetters');\n        this.clearTyped('returnLetters');\n        this.clearTyped('startLetters');\n    \n        let tryAgain = document.getElementById('tryAgain');\n        let yes = document.getElementById('yes');\n        let no = document.getElementById('no');\n        this.ctx.clearRect(0,0,1500,900);\n        this.ctx.drawImage(this.menuImage,0,0);\n        tryAgain.style.display='block';\n        yes.style.display='block';\n        no.style.display='block';\n        // this.ctx.drawImage(this.menuImage, 0, 0);\n    }\n\n    animate(currentTime=0){\n     if(!this.game.gameOver){\n        const elapsed = currentTime - this.lastFrameTime;\n            if (elapsed > this.frameDelay){\n                this.lastFrameTime=currentTime\n                this.game.moveObjects();\n                this.game.update();\n                this.game.draw(this.ctx);\n    \n            }\n            requestAnimationFrame(this.animate.bind(this));\n    }else{\n        this.over();\n    }\n    }\n    restart(){\n        this.clearTyped('againLetters');\n        this.clearTyped('returnLetters');\n        this.clearTyped('startLetters');\n        console.log('restarted');\n        this.lastFrameTime=0\n        this.game.restartObjects();\n        console.log(this.game);\n        let tryAgain = document.getElementById('tryAgain');\n        let yes = document.getElementById('yes');\n        let no = document.getElementById('no');\n        tryAgain.style.display='none';\n        yes.style.display='none';\n        no.style.display='none';\n        this.start();\n        \n\n    }\n   \n}\nexport default GameView;","const randomWord = 'https://api.api-ninjas.com/v1/randomword'\n\n\nexport async function getRandomWord(){\n  try {\n      const response = await fetch(\"https://random-word-api.vercel.app/api?words=1\")\n      if (response.ok) {\n        const result = await response.json();\n        return result[0];\n      } else {\n        throw response\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\nexport async function getRandom9Word(){\n    try {\n        const response = await fetch(\"https://random-word-api.vercel.app/api?words=1&length=9\")\n        if (response.ok) {\n          const result = await response.json();\n          return result[0];\n        } else {\n          throw response\n        }\n      } catch (error) {\n        console.error(error);\n      }\n  }\n\n  export async function getRandom8Word(){\n    try {\n        const response = await fetch(\"https://random-word-api.vercel.app/api?words=1&length=8\")\n        if (response.ok) {\n          const result = await response.json();\n          return result[0];\n        } else {\n          throw response\n        }\n      } catch (error) {\n        console.error(error);\n      }\n  }\n  \n\n// export async function getRandomWord(){\n//     try {\n//         const response = await fetch(\"https://api.api-ninjas.com/v1/randomword\",{\n//     method: 'GET',\n//     headers: { 'X-Api-Key': '/UnQYwpt2huxOYVHDrgpMQ==JFZmsclMm7gqLBGn'},\n//     contentType: 'application/json',\n//     success: function(result) {\n//         console.log(result);\n//     }})\n//         if (response.ok) {\n//           const result = await response.json();\n//           const word = result.word;\n//           return word\n//         } else {\n//           throw response\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n","\n// let game = document.getElementById('game');\n// game.width=500;\n// game.height=500;\n// const ctx = game.getContext(\"2d\");\n// ctx.fillStyle=\"black\";\n// ctx.fillRect(0,0,500,500);\n// import wordgenerator from \"./scripts\"\nimport {getRandomWord} from './scripts/wordgenerator.js';\nimport MovingObject from './scripts/movingObject.js';\nimport Setting from './scripts/setting.js';\nimport Human from './scripts/human.js';\nimport Game from \"./scripts/game.js\"\nimport Resource from './scripts/resources.js'\nimport GameView from \"./scripts/game_view.js\"\nimport Projectile from './scripts/projectile.js'\nimport Word from './scripts/word.js';\n\nwindow.Human = Human;\nwindow.MovingObject = MovingObject;\nwindow.Setting = Setting;\nwindow.Word = Word;\ndocument.addEventListener(\"DOMContentLoaded\", () => { \n\n  \n    // const word = getRandomWord();\n    // console.log(word);\n    let canvas= document.getElementById('game');\n    const ctx = canvas.getContext(\"2d\");\n    const imageUrls = ['./images/bg.png',\n    './images/grass_15.png',\n    './images/house1.png',\n    './images/walkcyclevarious.png',\n    './images/wireframe.png'];\n    let resources = new Resource(imageUrls);\n    let setting = new Setting(ctx);\n    // setting.drawFrame(ctx);\n    canvas.width = 1300;\n    canvas.height = 900;\n\n    // let trash = new Projectile(ctx);\n    // trash.drawFrame(ctx);\n    \n    // setting.drawFrame(ctx);\n    // let game = new Game();\n    // let gameview = new GameView(game,ctx).start();\n    const game = new Game();\n    console.log(game);\n   new GameView(game,ctx,canvas);\n \n\n  \n\n    // setting.width = 1000;\n    // setting.height = 500;\n    \n    // //code to be put in game class\n    // let humans=[]\n    // let human1 = new Human(ctx);\n    // human1.drawFrame(ctx);\n  \n    // let human2 = new Human();\n    // human1.animate(ctx,5)\n    // human1.animate(ctx,5);\n    // human2.animate(ctx,5);\n  });\n","import {getRandomWord} from './wordgenerator.js';\nclass Word {\n\n    async wordCheck(){\n        let initialWord;\n        do{\n            initialWord = await getRandomWord();\n            \n        }while(initialWord.length>10);\n        return initialWord;\n    }\n\n    \n    constructor(){       \n        this.wordCheck().then(result=>{\n            this.word=result;\n        })\n\n    }\n    \n    getWord(){\n        return this.word;\n    }\n    \n}\nexport default Word;","\nclass Resources{\n    constructor(imageUrls){\n        this.resourceCache = {};\n        this.loading=[];\n        this.readyCallbacks=[];\n        imageUrls.forEach(url=>{\n            this.load(url);\n        })\n    }\n\n    load(url){\n        this._load(url);\n    }\n\n    _load(url){\n        if (this.resourceCache[url]){\n            return this.resourceCache[url];\n        } else {\n            this.loading.push(url);\n            let img = new Image();\n            img.onload = ()=> {\n                this.resourceCache[url] = img;\n\n                if (this.isReady()){\n                    this.readyCallbacks.forEach(func => {\n                        func();\n                    })\n                }\n            };\n            this.resourceCache[url] = false;\n            img.src = url; \n        }\n    }\n    get(url){\n        return this.resourceCache[url];\n    }\n\n    isReady(){\n        let ready = true;\n        for (var k in this.resourceCache){\n            if(this.resourceCache.hasOwnProperty.call(this.resourceCache,k) && !this.resourceCache[k]){\n                ready = false;\n            }\n        }\n        return ready;\n    }\n\n    onReady(func){\n        this.readyCallbacks.push(func);\n    }\n\n\n}\nexport default Resources;"],"names":["static","constructor","pos","speed","game","this","move","getCenter","spriteWidth","Math","floor","isCollidedWith","human","width1","width2","projectileLane","humanLane","abs","detection1","detection2","console","log","ctx","backgroundImage","Image","imageLoaded","onload","src","drawFrame","drawImage","Human","MovingObject","async","initialWord","getRandomWord","word","x","y","super","startSpeed","score","targeted","status","setRandomWord","sprite","maxFrame","minFrame","width","height","centerX","centerY","spriteHeight","person","random","frame","IMAGE","getCenterX","getCenterY","personNum","drawWord","fillStyle","font","fillText","update","wordCheck","letter","slice","length","Projectile","randomIndex","dimensions","trash","url","number","rotation","rotationSpped","frameX","frameY","frames","dimX","dimY","Zombie","standingIndex","idleAnimation","targets","killed","projectile","projectileThrown","every","target","drawIdleFrame","some","drawThrowingFrame","throwProjectile","shift","push","add","throwingDimensions","dimensionX","dimensionY","throwingAnimation","throwingCol","idleDimensions","idleCol","Game","humans","zombies","setting","humanTargets","addHumans","addSetting","addZombies","active","time","gameOver","document","addEventListener","event","checkLetter","key","object","Error","zombie1","zombie2","zombie3","startLane","i","num_humans","positionFound","position","newHuman","Setting","moveObjects","concat","forEach","allObjects","draw","clearRect","DIM_X","DIM_Y","zombie","filter","triggerThrow","checkForLoss","checkforDeadHumans","assignHumans","checkHits","deadHuman","deadHumanPosition","includes","j","trash1","human1","remove","splice","indexOf","getSetting","restartObjects","GameView","canvas","lastFrameTime","frameRate","frameDelay","index","menuImage","startMenu","typingindex","againIndex","returnIndex","yesIndex","noIndex","yes","no","letters","getElementsByClassName","innerText","classList","againLetters","returnLetters","setTimeout","restart","returnToMenu","check","start","clearTyped","classname","window","location","reload","modeSelection","menuKeys","getElementById","style","display","pop","alphabet","toUpperCase","toLowerCase","sletters","aletters","arcade","survival","navbar","title","requestAnimationFrame","animate","bind","over","tryAgain","currentTime","arguments","undefined","response","fetch","ok","json","error","Word","then","result","getWord","getContext","imageUrls","resourceCache","loading","readyCallbacks","load","_load","img","isReady","func","get","ready","k","hasOwnProperty","call","onReady"],"sourceRoot":""}