{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript_project/./src/scripts/movingObject.js","webpack://javascript_project/./src/scripts/setting.js","webpack://javascript_project/./src/scripts/wordgenerator.js","webpack://javascript_project/./src/scripts/human.js","webpack://javascript_project/./src/scripts/projectile.js","webpack://javascript_project/./src/scripts/zombie.js","webpack://javascript_project/./src/scripts/game.js","webpack://javascript_project/./src/scripts/game_view.js","webpack://javascript_project/./src/index.js","webpack://javascript_project/./src/scripts/word.js"],"sourcesContent":["import {dist} from './util.js';\nconst NORMAL_FAME_TIME_DELTA = 1000/60;\nclass MovingObject{\n    static humanWdith=65;\n    static trashWidth=20;\n    constructor(pos,speed,game){\n        this.pos = pos;\n        this.speed = speed;\n        this.game=game;\n\n\n    }\n    move() {\n        \n        this.pos = [this.pos[0]-this.speed,this.pos[1]];\n    }\n    getCenter(spriteWidth){\n        return this.pos[0]+Math.floor(spriteWidth/2);\n    }\n    isCollidedWith(human,width1,width2){\n        // check if projectile is in the correct lane\n        // projectile 595,650,696\n        // human start 590,650,680\n        const projectileLane = this.pos[1];\n        const humanLane = human.pos[1];\n      \n        // Define the acceptable range for the lane\n        const laneRange = 20;\n        //axis-aligned bounding box(two objects a,b)\n        //if a.x + a.width >=b.x\n        //& (a.x<=b.x+b.width)\n        //&(a.y+a.height>=b.y)\n        //a.y<=(b.y+b.height)\n        if (Math.abs(projectileLane - humanLane) <= laneRange ) {\n          const detection1 = (this.pos[0]+width1>=human.pos[0]);\n          const detection2 = (human.pos[0]+width2>=this.pos[0]);\n          if (detection1 && detection2) {\n            console.log('collision detected')\n            return true;\n          }\n        }\n      \n        return false;\n    }\n\n\n\n}\n\nexport default MovingObject","\nclass Setting {\n    constructor(ctx){\n        this.backgroundImage = new Image();\n        this.imageLoaded = false;\n        this.backgroundImage.onload =()=>{\n            \n            this.imageLoaded = true;\n            // this.drawFrame(ctx);\n        }\n        // this.houseImage =  new Image();\n        this.backgroundImage.src = './images/newbg.png';\n        // this.houseImage.src = './images/house1.png';\n        // this.skyImage = new Image();\n        // this.skyImage.src = './images/sky1.png'\n    }\n\n    drawFrame(ctx){\n        if (this.imageLoaded){\n            ctx.drawImage(this.backgroundImage,0,0);\n        }\n        \n        \n        // ctx.drawImage(this.houseImage,10,200,100,100);\n        // ctx.drawImage(this.skyImage,0,10,100,50);\n\n\n\n      \n        }\n    \n    \n}\n\n\n\n\n\n\nexport default Setting\n","const randomWord = 'https://api.api-ninjas.com/v1/randomword'\n\n\nexport async function getRandomWord(){\n  try {\n      const response = await fetch(\"https://random-word-api.vercel.app/api?words=1\")\n      if (response.ok) {\n        const result = await response.json();\n        return result[0];\n      } else {\n        throw response\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\nexport async function getRandom9Word(){\n    try {\n        const response = await fetch(\"https://random-word-api.vercel.app/api?words=1&length=9\")\n        if (response.ok) {\n          const result = await response.json();\n          return result[0];\n        } else {\n          throw response\n        }\n      } catch (error) {\n        console.error(error);\n      }\n  }\n\n  export async function getRandom8Word(){\n    try {\n        const response = await fetch(\"https://random-word-api.vercel.app/api?words=1&length=8\")\n        if (response.ok) {\n          const result = await response.json();\n          return result[0];\n        } else {\n          throw response\n        }\n      } catch (error) {\n        console.error(error);\n      }\n  }\n  \n\n// export async function getRandomWord(){\n//     try {\n//         const response = await fetch(\"https://api.api-ninjas.com/v1/randomword\",{\n//     method: 'GET',\n//     headers: { 'X-Api-Key': '/UnQYwpt2huxOYVHDrgpMQ==JFZmsclMm7gqLBGn'},\n//     contentType: 'application/json',\n//     success: function(result) {\n//         console.log(result);\n//     }})\n//         if (response.ok) {\n//           const result = await response.json();\n//           const word = result.word;\n//           return word\n//         } else {\n//           throw response\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n","import MovingObject from './movingObject.js';\nimport * as Util from './util.js';\n\nimport Word from './word.js';\nimport * as RandomWord from './wordgenerator.js';\n\nclass Human extends MovingObject {\n    static IMAGE = './images/walkcyclevarious.png';\n    static start =[680,650,590];\n   \n    static frame = 9;\n    static spriteHeight = 60;\n    static spriteWidth = 65;\n    // need to set up 3 random positions for a human, \n    async setRandomWord(letters=5){\n        let initialWord;\n        // do{\n            initialWord = await RandomWord.getRandomWord();\n            \n        // }while(initialWord.length > letters);\n        this.word=initialWord;\n        this.score=100*this.word.length;\n    }\n\n    constructor (x,y,speed,game){\n      \n    \n        super([x,y],speed,game);\n        \n        this.targeted=false;\n        this.status = 'alive';\n        this.setRandomWord();\n        this.sprite = new Image();\n        this.maxFrame=11;\n        this.minFrame=9;\n        this.width=65;\n        this.height=60;\n        this.centerX = this.pos[0]+Human.spriteWidth/2;\n        this.centerY = this.pos[1]+Human.spriteHeight/2;\n        this.person = Math.floor(Math.random()*7)+1;\n        this.spriteHeight = Human.spriteHeight*this.person;\n        this.frame = Human.frame;\n        this.imageLoaded = false;\n        this.sprite.onload= ()=>{\n            this.imageLoaded=true;\n            // this.drawFrame(ctx);\n        };\n        this.sprite.src = Human.IMAGE;\n\n    }\n\n    getCenterX(){\n        return this.pos[0]+65/2;\n    }\n    getCenterY(){\n        return this.pos[1]+60/2;\n    }\n   drawFrame(ctx) {\n        let [x,y] = this.pos;\n        let personNum = this.person;\n        let frame = this.frame;\n        if (this.imageLoaded ){\n            \n            ctx.drawImage(this.sprite,Human.spriteWidth*frame,\n                Human.spriteHeight*personNum,\n                Human.spriteWidth,\n                Human.spriteHeight,\n                x,\n                y,\n                70,\n                70);\n            this.drawWord(ctx);\n            \n            \n        }\n        \n    }\n\n    drawWord(ctx){\n\n      \n        ctx.fillStyle='white';\n        ctx.font = '20px arial';\n        ctx.fillText(this.word,this.pos[0],this.pos[1]+5);\n    }\n    \n    update(){\n        if (this.frame<this.maxFrame) this.frame++;\n        else this.frame = this.minFrame;\n    }\n\n    move(){\n        // setInterval(()=>{\n        //     if (this.speed>=20){\n        //         this.speed+2\n        //     }},10000);\n        \n        let [x,y] = this.pos;\n        if (x>100) this.pos = [this.pos[0]-this.speed,this.pos[1]];\n    }\n\n\n    wordCheck(letter){\n\n        // if (word===this.word.word){\n        //     //trigger death event\n        // } \n            if (letter===this.word[0]){\n                this.word = this.word.slice(1);\n              \n            }\n            if(!this.word.length){\n                this.status='dead';\n                console.log(this);\n            }\n        }\n        \n    \n\n\n   \n\n  \n}\n\nexport default Human;\n\n","import MovingObject from './movingObject.js';\n\nclass Projectile extends MovingObject {\n    static spriteWidth = 20;\n    static spriteHeight = 20;\n    static url = './images/littered_dungeon.png';\n    static frames = [[3,4],[30,4],[60,4],[90,2]];\n    static dimensions = [[20,20],[20,20],[20,20],[30,30]];\n    constructor(y,game){\n        let pos = [100+50,y+20];\n        let speed = 20;\n        super(pos,speed,game)\n        this.randomIndex =Math.floor(Math.random()*4);\n        this.width = Projectile.dimensions[this.randomIndex][0];\n        this.height = Projectile.dimensions[this.randomIndex][1];\n        this.trash = new Image();\n        this.imageLoaded=false \n        this.trash.onload=()=>{\n            this.imageLoaded = true;\n\n        };\n        this.trash.src = Projectile.url;\n        this.number = Math.floor(Math.random()*3)+1;\n      \n    }\n    getCenterX(){\n        return this.pos[0]+20/2;\n    }\n    getCenterY(){\n        return this.pos[1]+20/2;\n    }\n    update(){\n        this.rotation+=this.rotationSpped;\n    }\n    drawFrame(ctx){\n        \n        let [frameX,frameY] = [Projectile.frames[this.randomIndex][0],Projectile.frames[this.randomIndex][1]];\n        let [dimX,dimY] = [Projectile.dimensions[this.randomIndex][0],Projectile.dimensions[this.randomIndex][1]];\n        if(this.imageLoaded){\n            \n            // ctx.drawImage(this.trash,3,4,20,20,this.pos[0],this.pos[1],20,20);\n            ctx.drawImage(this.trash,frameX,frameY,dimX,dimY,this.pos[0],this.pos[1],dimX,dimY);\n            // ctx.rotate(-1);\n            // ctx.drawImage(this.trash,0,0);\n        }\n    }\n    move(){\n        this.pos = [this.pos[0]+40,this.pos[1]];\n    }\n    \n\n\n}\nexport default Projectile;","import Projectile from \"./projectile\";\nimport Game from './game.js';\nclass Zombie{\n    static url = './images/zombie.png';\n    static throwingAnimation=[3,63,130,205,352,407,460,63]; \n    static throwingDimensions=[[50,70],[50,70],[50,70],[50,70],[50,70],[50,70],[68,70],[50,70]];\n    static idleDimensions=[[47,70],[47,70],[47,70],[44,70],[44,70],[44,70]];\n    static idleAnimation=[3,53,102,150,196,243];\n    static idleCol=163;\n    static throwingCol = 320;\n    static idleRow = [229];\n    constructor(y,game){\n        //y position is dependent on zombie lane\n        this.standingIndex=0;\n        this.x = 100;\n        this.y = y;\n        this.game = game;\n        this.sprite = new Image();\n        this.imageLoaded=false;\n        this.sprite.onload=()=>{\n            this.imageLoaded=true;\n        }\n        this.sprite.src = Zombie.url;\n        this.idleAnimation=[1,2,3,4,5,6];\n        this.targets=[];\n        this.killed=[];\n        this.projectile=false;\n        this.projectileThrown=false;\n\n    }\n\n    drawFrame(ctx){\n        if (this.targets.every((target=>target.targeted===true))|| this.targets.length===0){\n            this.drawIdleFrame(ctx);\n        }else if(this.targets.some(target=>target.targeted===false)){\n            this.drawThrowingFrame(ctx);\n        } else{\n            this.drawIdleFrame(ctx);\n        }\n    }\n    throwProjectile(){\n\n        if (this.targets.length > 0){\n            const target = this.targets.shift();\n            this.killed.push(target);\n            this.targets.shift();\n            if(!target.targeted){\n            const trash = new Projectile(this.y,this.game);\n            this.game.add(trash);\n            target.targeted=true;\n            }\n        }\n       \n    }\n    drawThrowingFrame(ctx){\n        let [frameX,frameY] = [Zombie.throwingDimensions[this.standingIndex][0],Zombie.throwingDimensions[this.standingIndex][1]];\n        let [dimensionX, dimensionY] =[Zombie.throwingAnimation[this.standingIndex],Zombie.throwingCol];\n        if(this.imageLoaded){\n            this.standingIndex++;\n            ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n            // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n            \n            if(this.standingIndex>7) {\n                this.throwProjectile();\n                this.standingIndex = 0;\n               }\n            }\n        }\n    drawIdleFrame(ctx){\n        let [frameX,frameY] = [Zombie.idleDimensions[this.standingIndex][0],Zombie.idleDimensions[this.standingIndex][1]]\n        let [dimensionX, dimensionY] =[Zombie.idleAnimation[this.standingIndex],Zombie.idleCol];\n        if(this.imageLoaded){\n                this.standingIndex++;\n                ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n                // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n           \n               if(this.standingIndex>5) this.standingIndex = 0;\n            }\n    }\n    \n\n}\n\nexport default Zombie;","import Human from './human.js';\nimport Setting from './setting.js';\nimport Zombie from './zombie.js';\nimport Projectile from './projectile.js';\nclass Game {\n    static DIM_X = 1500;\n    static DIM_Y = 900;\n    constructor(){\n        this.humanSpawnTime=2000;\n        this.numberOfHumans=0;\n        this.humansKilled=0;\n        this.humanSpeed=5;\n        this.score=0;\n        this.humans=[];\n        this.zombies=[];\n        this.setting = [];\n        this.humanTargets=[];\n        this.addSetting();\n        this.addZombies();\n        this.trash=[];\n        this.active = false;\n        this.time = 0;\n        this.gameOver=false;\n        document.addEventListener('keydown',event => {\n            //checking key pressed \n           \n            this.checkLetter(event.key);\n            //check if the event.key is equal to any of word[index]\n            //if equal, update the correct letter for all words currently on the screen,\n            // need to only check for humans position is within canvas width\n\n        })\n\n    }\n\n    add(object){\n        if (object instanceof Human) {\n            this.humans.push(object);\n          } else if (object instanceof Projectile ) {\n            this.trash.push(object);\n          } else {\n            throw new Error(\"unknown type of object\");\n          }\n\n    }\n\n\n    addZombies(){\n        let position=[575,630,676];\n        let zombie1 = new Zombie(575,this);\n        let zombie2 = new Zombie(640,this);\n        let zombie3 = new Zombie(700,this);\n\n        this.zombies.push(zombie1);\n        this.zombies.push(zombie2);\n        this.zombies.push(zombie3);\n    \n    }\n    \n    addHuman(){\n        console.log('called');\n        const startLane =[590,710,650];\n        const minDistance =200;\n        let timer = setInterval(()=>{\n            console.log(this.humanSpawnTime);\n            console.log('spawntimechange');\n            if(this.gameOver) clearInterval(timer);\n            if(this.humanSpawnTime>=1000) this.humanSpawnTime-=500;\n        },3000)\n        let speeder = setInterval(()=>{\n            if(this.gameOver) clearInterval(speeder);\n            console.log('speed change');\n            console.log(this.humanSpeed);\n            if(this.humanSpeed<=15) this.humanSpeed+=.5;\n        },4000)\n        let adder = setInterval(()=>{\n            if (this.gameOver) clearInterval(adder);\n            let randomX = Math.floor(Math.random()*(300+1))+1400;\n            if (!this.numberOfHumans){\n                this.add(new Human(randomX,590,this.humanSpeed,this));\n                this.numberOfHumans+=1;\n            }\n            //need to add a new human, do numberofhumans%3 to cycle throguh cycle lanes\n            this.numberOfHumans+=1;\n            let laneNumber = this.numberOfHumans%3; \n            this.add(new Human(randomX,startLane[laneNumber],this.humanSpeed,this));\n        },this.humanSpawnTime)\n    }\n\n    addSetting(){\n        this.setting.push(new Setting());\n    }\n\n    moveObjects(){\n        this.humans.concat(this.trash).forEach(object =>{\n            object.move();\n        })\n        if (this.humans.some(human=>human.pos[0]<=150))this.gameOver=true;\n        \n    }\n\n    allObjects(){\n        return [].concat(this.setting,this.humans);\n    }\n    draw(ctx){\n        // 3 human lanes, are 680,650,590\n        //zombie start lanes are 575,630,676\n        //projectile start lanes = 595,650,696\n        ctx.clearRect(0,0,Game.DIM_X,Game.DIM_Y)\n        this.setting[0].drawFrame(ctx);\n        this.humans.forEach((object)=>{\n            object.drawFrame(ctx);\n        });\n        this.zombies.forEach(zombie=>{\n            zombie.drawFrame(ctx);\n            // if zombie status = throw, animate drawthrowingframe, after projectile is thrown\n            //change status to not throw. to revert back to idleanimations\n            //else animate idleframe for zombie\n        });\n        this.trash.forEach(object=>{\n            object.drawFrame(ctx);\n        })\n        }\n    \n    checkLetter(letter){\n        this.humans.filter((human)=>human.pos[0]<1500).forEach(human=>{\n            human.wordCheck(letter);\n        })\n\n    }\n    triggerThrow(){\n        \n    }\n    checkForLoss(){\n        this.humans.some(human=>human.pos[0]<150);\n    }\n    update(){\n        this.humans.forEach(human=>{\n            human.update();\n        })\n        this.checkforDeadHumans();\n        this.assignHumans();\n        this.checkHits();\n        if (this.gameOver){\n\n        }\n    }\n    // resetProjectileThrown(){\n    //     this.zombies.forEach((zombie)=>{\n    //         zombie.projectileThrown=false;\n    //     });\n    // }\n    //maybe have a total trash for each zombie to throw, so it will just throw\n    //all the trash specific for each humam\n    \n    checkforDeadHumans(){\n        this.humans.forEach(human=>{\n            if (human.status ==='dead'){\n                this.humanTargets.push(human);\n                }\n\n            });\n        }\n        assignHumans(){\n            for(let i =0;i<this.humanTargets.length;i++){\n            let deadHuman =this.humanTargets[i];\n            let deadHumanPosition = this.humanTargets[i].pos[1];\n            switch (true){\n                case(deadHumanPosition-10===700):\n                    //change status for zombie 3 \n                    if (!this.zombies[2].targets.includes(deadHuman)&&!this.zombies[2].killed.includes(deadHuman)){\n                    this.zombies[2].targets.push(deadHuman);\n                    this.zombies[2].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-20===630):\n                    if (!this.zombies[1].targets.includes(deadHuman)&&!this.zombies[1].killed.includes(deadHuman)){\n                    this.zombies[1].targets.push(deadHuman);\n                    this.zombies[1].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-15===575):\n                if (!this.zombies[0].targets.includes(deadHuman)&&!this.zombies[0].killed.includes(deadHuman)){\n                    this.zombies[0].targets.push(deadHuman);\n                    this.zombies[0].projectile=true;\n                    }\n                    break;\n            }\n            }\n        }\n    \n    \n    checkHits(){\n        //check if trash hit dead human\n        for(let i =0;i<this.trash.length;i++){\n            for(let j=0;j<this.humans.length;j++){\n                const trash1 = this.trash[i];\n                const human1 = this.humans[j];\n                if (trash1 && human1){\n                    if(trash1.isCollidedWith(human1,20,65) && human1.pos[0]<1500&&human1.status==='dead'){\n                        this.remove(trash1);\n                        this.remove(human1);\n                    }\n                }\n            }\n        }\n    }\n\n    remove(object){\n        console.log('removal in process');\n        if (object instanceof Projectile){\n            this.trash.splice(this.trash.indexOf(object),1);\n        } else if (object instanceof Human){\n            this.humans.splice(this.humans.indexOf(object),1);\n            this.score+=object.score;\n            this.humansKilled+=1;\n        } else {\n            throw new Error(\"unknown type of object\");\n        }\n    }\n\n    getSetting(){\n        return this.setting[0];\n    }\n    restartObjects(){\n        this.humanSpawnTime=2000;\n        this.humanSpeed=5;\n        this.score=0;\n        this.humansKilled=0;\n        this.humanSpeed=2;\n        this.numberOfHumans=0;\n        this.gameOver=false;\n        this.humans = [];\n        this.trash=[];\n        this.zombies=[];\n        this.addZombies();\n        this.addHuman();\n    }\n}\n\nexport default Game;","import Game from \"./game.js\"\nclass GameView {\n    static alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    constructor(game,ctx,canvas){\n        this.canvas=canvas;\n        this.ctx = ctx;\n        this.game = game;\n        this.lastFrameTime=0;\n        this.frameRate=10;\n        this.frameDelay = 1000/this.frameRate;\n        this.score = document.getElementById('score');\n        this.humansKilled = document.getElementById('humansKilled');\n        this.index =0;\n        this.menuImage=new Image();\n        this.imageLoaded=false;\n        this.menuImage.onload=()=>{\n            this.imageLoaded=true;\n            this.startMenu();\n        }\n        this.menuImage.src = './images/newbg.png';\n        this.typingindex=0;\n        this.againIndex=0;\n        this.returnIndex=0;\n        this.yesIndex=0;\n        this.noIndex=0;\n        this.yes = ['y','e','s'];\n        this.no = ['n','o'];\n        const eventListener = document.addEventListener('keydown', (event)=>{\n            // if (event.key ==='Backspace'){\n            //     this.menuKeys.pop();\n            // } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n            //     this.menuKeys.push(event.key.toLowerCase());\n            // \n            console.log(event.key);\n            let letters = document.getElementsByClassName('startLetters');\n            for(let i =this.typingindex;i<letters.length;i++){\n                let letter=letters[i].innerText;\n                if (letter===event.key){\n                    letters[i].classList.add('typed');\n                    this.typingindex++;\n                    break;\n                } \n                else {\n                    this.typingindex=0;\n                    for(let j=0;j<letters.length;j++)\n                        letters[j].classList.remove('typed');\n                }\n            }\n            \n          \n            // };\n            if(this.game.gameOver){\n            let againLetters =document.getElementsByClassName('againLetters');\n            let returnLetters = document.getElementsByClassName('returnLetters');\n            \n            switch(this.yesIndex){\n                case(0):\n                    if(this.yes.indexOf(event.key)===0) {\n                        againLetters[this.yesIndex].classList.add('typed')\n                        this.yesIndex+=1\n                    };\n                    \n                    break;\n                case(1):\n                    if(this.yes.indexOf(event.key)===1) {\n                    againLetters[this.yesIndex].classList.add('typed')\n                    this.yesIndex+=1;\n                    }\n                    break;\n                case(2):\n                    this.yesIndex=0;\n                    if(this.yes.indexOf(event.key)===2) {\n                    againLetters[2].classList.add('typed')\n                    setTimeout(()=>this.restart(),3000);\n                    }\n                    break;\n            }\n            switch(this.noIndex){\n                case(0):\n                    if(this.no.indexOf(event.key)===0) {\n                        returnLetters[this.noIndex].classList.add('typed');\n                        this.noIndex+=1\n                    };\n                    break;\n                case(1):\n                    console.log(event.key===this.no[1]);\n                    this.noIndex=0;\n                    if(this.no.indexOf(event.key)===1) {\n                    returnLetters[1].classList.add('typed');\n                    this.returnToMenu();\n                    }\n                    break;\n              \n            }\n        }\n            // for(let i =this.againIndex;i<againLetters.length;i++){\n            //     let letter=againLetters[i].innerText;\n            //     if (letter===event.key){\n            //         againLetters[i].classList.add('typed');\n            //         this.againIndex++;\n            //         break;\n            //     } \n            //     else {\n            //         this.againIndex=0;\n            //         for(let j=0;j<againLetters.length;j++)\n            //         againLetters[j].classList.remove('typed');\n            //     }\n            // }\n            // for(let i =this.returnIndex;i< returnLetters.length;i++){\n            //     let letter=returnLetters[i].innerText;\n            //     if (letter===event.key){\n            //         returnLetters[i].classList.add('typed');\n            //         this.returnIndex++;\n               \n            //         break;\n            //     } \n            //     else {\n            //         this.returnIndex=0;\n            //         for(let j=0;j<returnLetters.length;j++)\n            //             returnLetters[j].classList.remove('typed');\n            //     }\n            // }\n            let check = document.getElementsByClassName('typed');\n            if(check.length===5&&check[0].innerText==='s') {\n                setTimeout(()=>this.start(),1000);\n                this.typingindex=0;\n            }\n            // else if(check.length===2&&check[0].innerText==='n'){\n            //     this.startMenu();\n            //     this.returnIndex=0;\n            // }else if(check.length===3&&check[0].innerText==='y'){\n            //     setTimeout(()=>this.restart(),1000);\n            //     this.againIndex=0;\n            // }\n        })\n        // document.addEventListener('keydown',event => {\n        //     //checking key pressed \n        //     console.log(event.key);\n        //     this.game.checkLetter(event.key);\n        //     //check if the event.key is equal to any of word[index]\n        //     //if equal, update the correct letter for all words currently on the screen,\n        //     // need to only check for humans position is within canvas width\n\n        // })\n        \n    }\n    clearTyped(classname){\n        let remove = document.getElementsByClassName(classname);\n        for(let i =0;i<remove.length;i++){\n            remove[i].classList.remove('typed');\n        }\n    }\n    startMenu(){\n        this.ctx.clearRect(0,0,1500,900);\n        this.ctx.drawImage(this.menuImage,0,0);\n\n        \n        // this.clearTyped('againLetters');\n        // this.clearTyped('returnLetters');\n        // let typingindex=0;\n        // let againIndex=0;\n        // let returnIndex=0;\n    //     const startMenuEvent = document.addEventListener('keydown', (event)=>{\n    //     // if (event.key ==='Backspace'){\n    //     //     this.menuKeys.pop();\n    //     // } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n    //     //     this.menuKeys.push(event.key.toLowerCase());\n    //     // \n\n    //     let letters = document.getElementsByClassName('startLetters');\n    //     for(let i =typingindex;i<letters.length;i++){\n    //         let letter=letters[i].innerText;\n    //         if (letter===event.key){\n    //             letters[i].classList.add('typed');\n    //             typingindex++;\n\n    //             break;\n    //         } \n    //         else {\n    //             typingindex=0;\n    //             for(let j=0;j<letters.length;j++)\n    //                 letters[j].classList.remove('typed');\n    //         }\n    //     }\n        \n      \n    //     // };\n    //     let againLetters =document.getElementsByClassName('againLetters');\n    //     let returnLetters = document.getElementsByClassName('returnLetters');\n   \n\n    //     for(let i =againIndex;i<againLetters.length;i++){\n    //         let letter=againLetters[i].innerText;\n    //         if (letter===event.key){\n    //             againLetters[i].classList.add('typed');\n    //             againIndex++;\n    //             break;\n    //         } \n    //         else {\n    //             againIndex=0;\n    //             for(let j=0;j<againLetters.length;j++)\n    //             againLetters[j].classList.remove('typed');\n    //         }\n    //     }\n    //     for(let i =returnIndex;i< returnLetters.length;i++){\n    //         let letter=returnLetters[i].innerText;\n    //         if (letter===event.key){\n    //             returnLetters[i].classList.add('typed');\n    //             returnIndex++;\n           \n    //             break;\n    //         } \n    //         else {\n    //             returnIndex=0;\n    //             for(let j=0;j<returnLetters.length;j++)\n    //                 returnLetters[j].classList.remove('typed');\n    //         }\n    //     }\n    //     let check = document.getElementsByClassName('typed');\n    //     if(check.length===5&&check[0].innerText==='s') {\n    //         setTimeout(()=>this.start(),1000);\n    //     }else if(check.length===2&&check[0].innerText==='n'){\n    //         this.startMenu();\n    //     }else if(check.length===3&&check[0].innerText==='y'){\n    //         setTimeout(()=>this.restart(),1000);\n    //     }\n    // })\n    }\n    returnToMenu(){\n        window.location.reload();\n    }\n       \n    modeSelection(){\n        this.menuKeys=[];\n        let navbar = document.getElementById('navBar')\n        navbar.style.display='none';\n        let modes = document.getElementById('modeSelection')\n        modes.style.display='block';\n        document.addEventListener('keydown',event=>{\n            if (event.key ==='Backspace'){\n                this.menuKeys.pop();\n            } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n                this.menuKeys.push(event.key.toLowerCase());\n            };\n            \n            let sletters = document.getElementsByClassName('sLetters');\n            let aletters = document.getElementsByClassName('aLetters');\n            for(let i=0;i<this.menuKeys.length;i++){\n                if (this.menuKeys[i]===sletters[i].innerText){\n                    sletters[i].classList.add('typed');\n                } else {\n                    sletters[i].classList.remove('typed');\n                }\n                if(this.menuKeys[i]===aletters[i].innerText){\n                    aletters[i].classList.add('typed');\n                }else {\n                    aletters[i].classList.remove('typed');\n                }\n            }\n            let check = document.getElementsByClassName('typed');\n            if(check.length===6) {\n                console.log(arcade);\n            } else if(check.length===8){\n                console.log(survival);\n            }\n        })\n    }\n    start(){\n        let navbar = document.getElementById('navBar')\n        let title = document.getElementById('myTitle')\n        navbar.style.display='none';\n        title.style.display='none';\n        this.score.style.display='block';\n        this.humansKilled.style.display='block';\n        \n        this.game.addHuman();\n\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    over(){\n        //remove all previoous typed elements\n        this.clearTyped('againLetters');\n        this.clearTyped('returnLetters');\n        this.clearTyped('startLetters');\n    \n        let tryAgain = document.getElementById('tryAgain');\n        let yes = document.getElementById('yes');\n        let no = document.getElementById('no');\n        this.ctx.clearRect(0,0,1500,900);\n        this.ctx.drawImage(this.menuImage,0,0);\n        tryAgain.style.display='block';\n        yes.style.display='block';\n        no.style.display='block';\n        // this.ctx.drawImage(this.menuImage, 0, 0);\n    }\n\n    animate(currentTime=0){\n     if(!this.game.gameOver){\n        const elapsed = currentTime - this.lastFrameTime;\n            if (elapsed > this.frameDelay){\n                this.lastFrameTime=currentTime\n                this.game.moveObjects();\n                this.game.update();\n                this.game.draw(this.ctx);\n                this.score.innerText=`Score: ${this.game.score}`;\n                this.humansKilled.innerText =`Kills: ${this.game.humansKilled}`;\n    \n            }\n            requestAnimationFrame(this.animate.bind(this));\n    }else{\n        this.over();\n    }\n    }\n    restart(){\n        this.clearTyped('againLetters');\n        this.clearTyped('returnLetters');\n        this.clearTyped('startLetters');\n        console.log('restarted');\n        this.lastFrameTime=0\n        this.game.restartObjects();\n        console.log(this.game);\n        let tryAgain = document.getElementById('tryAgain');\n        let yes = document.getElementById('yes');\n        let no = document.getElementById('no');\n        tryAgain.style.display='none';\n        yes.style.display='none';\n        no.style.display='none';\n        this.start();\n        \n\n    }\n   \n}\nexport default GameView;","\n// let game = document.getElementById('game');\n// game.width=500;\n// game.height=500;\n// const ctx = game.getContext(\"2d\");\n// ctx.fillStyle=\"black\";\n// ctx.fillRect(0,0,500,500);\n// import wordgenerator from \"./scripts\"\nimport {getRandomWord} from './scripts/wordgenerator.js';\nimport MovingObject from './scripts/movingObject.js';\nimport Setting from './scripts/setting.js';\nimport Human from './scripts/human.js';\nimport Game from \"./scripts/game.js\"\n\nimport GameView from \"./scripts/game_view.js\"\nimport Projectile from './scripts/projectile.js'\nimport Word from './scripts/word.js';\n\nwindow.Human = Human;\nwindow.MovingObject = MovingObject;\nwindow.Setting = Setting;\nwindow.Word = Word;\ndocument.addEventListener(\"DOMContentLoaded\", () => { \n\n  \n    // const word = getRandomWord();\n    // console.log(word);\n    let canvas= document.getElementById('game');\n    const ctx = canvas.getContext(\"2d\");\n    const imageUrls = ['./images/bg.png',\n    './images/grass_15.png',\n    './images/house1.png',\n    './images/walkcyclevarious.png',\n    './images/wireframe.png'];\n    // setting.drawFrame(ctx);\n    canvas.width = 1400;\n    canvas.height = 900;\n\n    // let trash = new Projectile(ctx);\n    // trash.drawFrame(ctx);\n    \n    // setting.drawFrame(ctx);\n    // let game = new Game();\n    // let gameview = new GameView(game,ctx).start();\n    const game = new Game();\n    console.log(game.setting.backgroundImage);\n\n   new GameView(game,ctx,canvas);\n \n\n  \n\n    // setting.width = 1000;\n    // setting.height = 500;\n    \n    // //code to be put in game class\n    // let humans=[]\n    // let human1 = new Human(ctx);\n    // human1.drawFrame(ctx);\n  \n    // let human2 = new Human();\n    // human1.animate(ctx,5)\n    // human1.animate(ctx,5);\n    // human2.animate(ctx,5);\n  });\n","import {getRandomWord} from './wordgenerator.js';\nclass Word {\n\n    async wordCheck(){\n        let initialWord;\n        do{\n            initialWord = await getRandomWord();\n            \n        }while(initialWord.length>10);\n        return initialWord;\n    }\n\n    \n    constructor(){       \n        this.wordCheck().then(result=>{\n            this.word=result;\n        })\n\n    }\n    \n    getWord(){\n        return this.word;\n    }\n    \n}\nexport default Word;"],"names":["static","constructor","pos","speed","game","this","move","getCenter","spriteWidth","Math","floor","isCollidedWith","human","width1","width2","projectileLane","humanLane","abs","detection1","detection2","console","log","ctx","backgroundImage","Image","imageLoaded","onload","src","drawFrame","drawImage","async","getRandomWord","response","fetch","ok","json","error","Human","MovingObject","initialWord","RandomWord","word","score","length","x","y","super","targeted","status","setRandomWord","sprite","maxFrame","minFrame","width","height","centerX","centerY","spriteHeight","person","random","frame","IMAGE","getCenterX","getCenterY","personNum","drawWord","fillStyle","font","fillText","update","wordCheck","letter","slice","Projectile","randomIndex","dimensions","trash","url","number","rotation","rotationSpped","frameX","frameY","frames","dimX","dimY","Zombie","standingIndex","idleAnimation","targets","killed","projectile","projectileThrown","every","target","drawIdleFrame","some","drawThrowingFrame","throwProjectile","shift","push","add","throwingDimensions","dimensionX","dimensionY","throwingAnimation","throwingCol","idleDimensions","idleCol","Game","humanSpawnTime","numberOfHumans","humansKilled","humanSpeed","humans","zombies","setting","humanTargets","addSetting","addZombies","active","time","gameOver","document","addEventListener","event","checkLetter","key","object","Error","zombie1","zombie2","zombie3","addHuman","startLane","timer","setInterval","clearInterval","speeder","adder","randomX","laneNumber","Setting","moveObjects","concat","forEach","allObjects","draw","clearRect","DIM_X","DIM_Y","zombie","filter","triggerThrow","checkForLoss","checkforDeadHumans","assignHumans","checkHits","i","deadHuman","deadHumanPosition","includes","j","trash1","human1","remove","splice","indexOf","getSetting","restartObjects","GameView","canvas","lastFrameTime","frameRate","frameDelay","getElementById","index","menuImage","startMenu","typingindex","againIndex","returnIndex","yesIndex","noIndex","yes","no","letters","getElementsByClassName","innerText","classList","againLetters","returnLetters","setTimeout","restart","returnToMenu","check","start","clearTyped","classname","window","location","reload","modeSelection","menuKeys","style","display","pop","alphabet","toUpperCase","toLowerCase","sletters","aletters","arcade","survival","navbar","title","requestAnimationFrame","animate","bind","over","tryAgain","currentTime","arguments","undefined","Word","then","result","getWord","getContext"],"sourceRoot":""}