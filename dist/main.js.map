{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript_project/./src/scripts/movingObject.js","webpack://javascript_project/./src/scripts/setting.js","webpack://javascript_project/./src/scripts/wordgenerator.js","webpack://javascript_project/./src/scripts/human.js","webpack://javascript_project/./src/scripts/projectile.js","webpack://javascript_project/./src/scripts/zombie.js","webpack://javascript_project/./src/scripts/game.js","webpack://javascript_project/./src/index.js","webpack://javascript_project/./src/scripts/word.js","webpack://javascript_project/./src/scripts/resources.js","webpack://javascript_project/./src/scripts/game_view.js"],"sourcesContent":["import {dist} from './util.js';\nconst NORMAL_FAME_TIME_DELTA = 1000/60;\nclass MovingObject{\n    static humanWdith=65;\n    static trashWidth=20;\n    constructor(pos,speed,game){\n        this.pos = pos;\n        this.speed = speed;\n        this.game=game;\n\n\n    }\n    move() {\n        \n        this.pos = [this.pos[0]-this.speed,this.pos[1]];\n    }\n    \n    isCollidedWith(human){\n        // check if projectile is in the correct lane\n        // projectile 595,650,696\n        // human start 590,650,680\n        const projectileLane = this.pos[1];\n        const humanLane = human.pos[1];\n      \n        // Define the acceptable range for the lane\n        const laneRange = 20;\n      \n        if (Math.abs(projectileLane - humanLane) <= laneRange ) {\n        console.log(this.getCenterX());\n          const centerDist = this.getCenterX() - human.getCenterX();\n          if (centerDist ===0) {\n            return true;\n          }\n        }\n      \n        return false;\n    }\n    //     let sameLane = false;\n    //     const laneRange=10;\n    //     switch(true){\n    //         case(this.pos[1]-5===590):\n    //             sameLane=true;\n    //             break;\n    //         case(this.pos[1]===650):\n    //             sameLane = true;\n    //             break;\n    //         case(this.pos[1]-6===690):\n    //             sameLane = true;\n    //             break;\n    //         }\n        \n    //     if(sameLane){\n    //     const centerDist=this.pos[0]-human.pos[0];\n    //     if (centerDist>=-10) return true;\n    //     }\n    // }\n\n\n}\n\nexport default MovingObject","\nclass Setting {\n    constructor(ctx){\n        this.backgroundImage = new Image();\n        this.imageLoaded = false;\n        this.backgroundImage.onload =()=>{\n            \n            this.imageLoaded = true;\n            // this.drawFrame(ctx);\n        }\n        // this.houseImage =  new Image();\n        this.backgroundImage.src = './images/bg4.0.png';\n        // this.houseImage.src = './images/house1.png';\n        // this.skyImage = new Image();\n        // this.skyImage.src = './images/sky1.png'\n    }\n\n    drawFrame(ctx){\n        \n        if (this.imageLoaded){\n            ctx.drawImage(this.backgroundImage,0,0);\n        }\n        \n        \n        // ctx.drawImage(this.houseImage,10,200,100,100);\n        // ctx.drawImage(this.skyImage,0,10,100,50);\n\n\n\n      \n        }\n    \n    \n}\n\n\n\n\n\n\nexport default Setting\n","const randomWord = 'https://api.api-ninjas.com/v1/randomword'\n\n\nexport async function getRandomWord(){\n  try {\n      const response = await fetch(\"https://random-word-api.vercel.app/api?words=1\")\n      if (response.ok) {\n        const result = await response.json();\n        return result[0];\n      } else {\n        throw response\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n// export async function getRandomWord(){\n//     try {\n//         const response = await fetch(\"https://api.api-ninjas.com/v1/randomword\",{\n//     method: 'GET',\n//     headers: { 'X-Api-Key': '/UnQYwpt2huxOYVHDrgpMQ==JFZmsclMm7gqLBGn'},\n//     contentType: 'application/json',\n//     success: function(result) {\n//         console.log(result);\n//     }})\n//         if (response.ok) {\n//           const result = await response.json();\n//           const word = result.word;\n//           return word\n//         } else {\n//           throw response\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n","import MovingObject from './movingObject.js';\nimport * as Util from './util.js';\nimport Resources from './resources.js';\nimport Word from './word.js';\nimport {getRandomWord} from './wordgenerator.js';\n\nclass Human extends MovingObject {\n    static IMAGE = './images/walkcyclevarious.png';\n    static start =[680,650,590];\n    static startSpeed=.5;\n    static frame = 9;\n    static spriteHeight = 60;\n    static spriteWidth = 65;\n    // need to set up 3 random positions for a human, \n    async setRandomWord(letters=5){\n        let initialWord;\n        do{\n            initialWord = await getRandomWord();\n            \n        }while(initialWord.length > letters);\n        this.word=initialWord;\n    }\n\n    constructor (x,y,game){\n        const speed = Human.startSpeed\n    \n        super([x,y],speed,game);\n        this.status = 'alive';\n        this.setRandomWord();\n        this.sprite = new Image();\n        this.maxFrame=11;\n        this.minFrame=9;\n        this.width=65;\n        this.height=60;\n        this.centerX = this.pos[0]+Human.spriteWidth/2;\n        this.centerY = this.pos[1]+Human.spriteHeight/2;\n        this.person = Math.floor(Math.random()*7)+1;\n        this.spriteHeight = Human.spriteHeight*this.person;\n        this.frame = Human.frame;\n        this.imageLoaded = false;\n        this.sprite.onload= ()=>{\n            this.imageLoaded=true;\n            // this.drawFrame(ctx);\n        };\n        this.sprite.src = Human.IMAGE;\n\n    }\n\n    getCenterX(){\n        return this.pos[0]+65/2;\n    }\n    getCenterY(){\n        return this.pos[1]+60/2;\n    }\n   drawFrame(ctx) {\n        let [x,y] = this.pos;\n        let personNum = this.person;\n        let frame = this.frame;\n        if (this.imageLoaded ){\n            \n            ctx.drawImage(this.sprite,Human.spriteWidth*frame,\n                Human.spriteHeight*personNum,\n                Human.spriteWidth,\n                Human.spriteHeight,\n                x,\n                y,\n                70,\n                70);\n            this.drawWord(ctx);\n            \n            \n        }\n        // ctx.drawImage(this.sprite,65,61,65,61,this.pos[0],this.pos[1],65,61);\n    }\n\n    drawWord(ctx){\n\n        // ctx.fillText(this.correctLetters.join(''),this.pos[0],this.pos[1]+5);\n        // let test = ctx.measureText(this.correctLetters.join('')).width;\n        ctx.fillStyle='white';\n        ctx.font = '20px arial';\n        ctx.fillText(this.word,this.pos[0],this.pos[1]+5);\n    }\n    \n    update(){\n        if (this.frame<this.maxFrame) this.frame++;\n        else this.frame = this.minFrame;\n        // if (!this.lettersToType.length){\n        //     this.status = 'dead';\n        // }\n    }\n\n    move(){\n        let [x,y] = this.pos;\n        if (x>100) this.pos = [this.pos[0]-10,this.pos[1]];\n    }\n\n//     status(){\n//         if (!this.lettersToType.length){\n//             this.status = 'dead';\n//         }\n// }\n    wordCheck(letter){\n\n        // if (word===this.word.word){\n        //     //trigger death event\n        // } \n            if (letter===this.word[0]){\n                this.word = this.word.slice(1);\n              \n            }\n            if(!this.word.length){\n                this.status='dead';\n                console.log(this);\n            }\n        }\n        \n    \n\n\n   \n\n    // checkCollision(rect1,rect2){\n    //     //check if a projectile has hit a human\n        \n\n    // }\n}\n\nexport default Human;\n\n","import MovingObject from './movingObject.js';\n\nclass Projectile extends MovingObject {\n    static spriteWidth = 20;\n    static spriteHeight = 20;\n    static url = './images/littered_dungeon.png';\n    static frames = [[3,4],[30,4],[60,4],[90,2]];\n    static dimensions = [[20,20],[20,20],[20,20],[30,30]];\n    constructor(y,game){\n        let pos = [100+50,y+20];\n        let speed = 20;\n        super(pos,speed,game)\n        this.randomIndex =Math.floor(Math.random()*4);\n        this.width = Projectile.dimensions[this.randomIndex][0];\n        this.height = Projectile.dimensions[this.randomIndex][1];\n        this.trash = new Image();\n        this.imageLoaded=false \n        this.trash.onload=()=>{\n            this.imageLoaded = true;\n\n        };\n        this.trash.src = Projectile.url;\n        this.number = Math.floor(Math.random()*3)+1;\n      \n    }\n    getCenterX(){\n        return this.pos[0]+20/2;\n    }\n    getCenterY(){\n        return this.pos[1]+20/2;\n    }\n    update(){\n        this.rotation+=this.rotationSpped;\n    }\n    drawFrame(ctx){\n        \n        let [frameX,frameY] = [Projectile.frames[this.randomIndex][0],Projectile.frames[this.randomIndex][1]];\n        let [dimX,dimY] = [Projectile.dimensions[this.randomIndex][0],Projectile.dimensions[this.randomIndex][1]];\n        if(this.imageLoaded){\n            \n            // ctx.drawImage(this.trash,3,4,20,20,this.pos[0],this.pos[1],20,20);\n            ctx.drawImage(this.trash,frameX,frameY,dimX,dimY,this.pos[0],this.pos[1],dimX,dimY);\n            // ctx.rotate(-1);\n            // ctx.drawImage(this.trash,0,0);\n        }\n    }\n    move(){\n        this.pos = [this.pos[0]+100,this.pos[1]];\n    }\n    \n\n\n}\nexport default Projectile;","import Projectile from \"./projectile\";\nimport Game from './game.js';\nclass Zombie{\n    static url = './images/zombie.png';\n    static throwingAnimation=[3,63,130,205,352,407,460,63]; \n    static throwingDimensions=[[50,70],[50,70],[50,70],[50,70],[50,70],[50,70],[68,70],[50,70]];\n    static idleDimensions=[[47,70],[47,70],[47,70],[44,70],[44,70],[44,70]];\n    static idleAnimation=[3,53,102,150,196,243];\n    static idleCol=163;\n    static throwingCol = 320;\n    static idleRow = [229];\n    constructor(y,game){\n        //y position is dependent on zombie lane\n        this.standingIndex=0;\n        this.x = 100;\n        this.y = y;\n        this.game = game;\n        this.sprite = new Image();\n        this.imageLoaded=false;\n        this.sprite.onload=()=>{\n            this.imageLoaded=true;\n        }\n        this.sprite.src = Zombie.url;\n        this.idleAnimation=[1,2,3,4,5,6];\n        this.targets=[];\n        this.projectile=false;\n        this.projectileThrown=false;\n\n    }\n\n    drawFrame(ctx){\n        if (this.targets.length>0){\n            this.drawThrowingFrame(ctx);\n        }else{\n            this.drawIdleFrame(ctx);\n        }\n    }\n    throwProjectile(){\n        let targetLength=this.targets.length\n        for(let i=0;i<targetLength;i++){\n            let trash = new Projectile(this.y);\n            this.game.add(trash)\n            this.targets.splice(i,1);\n        }\n    }\n    drawThrowingFrame(ctx){\n        let [frameX,frameY] = [Zombie.throwingDimensions[this.standingIndex][0],Zombie.throwingDimensions[this.standingIndex][1]];\n        let [dimensionX, dimensionY] =[Zombie.throwingAnimation[this.standingIndex],Zombie.throwingCol];\n        if(this.imageLoaded){\n            this.standingIndex++;\n            ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n            // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n            \n            if(this.standingIndex>7) {\n                this.throwProjectile();\n                this.standingIndex = 0;\n               }\n            }\n        }\n    drawIdleFrame(ctx){\n        let [frameX,frameY] = [Zombie.idleDimensions[this.standingIndex][0],Zombie.idleDimensions[this.standingIndex][1]]\n        let [dimensionX, dimensionY] =[Zombie.idleAnimation[this.standingIndex],Zombie.idleCol];\n        if(this.imageLoaded){\n                this.standingIndex++;\n                ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n                // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n           \n               if(this.standingIndex>5) this.standingIndex = 0;\n            }\n    }\n    \n\n}\n\nexport default Zombie;","import Human from './human.js';\nimport Setting from './setting.js';\nimport Zombie from './zombie.js';\nimport Projectile from './projectile.js';\nclass Game {\n    static num_humans=20;\n    static DIM_X = 1500;\n    static DIM_Y = 900;\n    constructor(){\n        this.humans = [];\n        this.zombies=[];\n        this.setting = [];\n        this.addHumans();\n        this.addSetting();\n        this.addZombies();\n        this.trash=[];\n        this.active = false;\n        this.time = 0;\n        document.addEventListener('keydown',event => {\n            //checking key pressed \n            console.log(event.key);\n            this.checkLetter(event.key);\n            //check if the event.key is equal to any of word[index]\n            //if equal, update the correct letter for all words currently on the screen,\n            // need to only check for humans position is within canvas width\n\n        })\n\n    }\n\n    \n    add(object){\n        if (object instanceof Human) {\n            this.humans.push(object);\n          } else if (object instanceof Projectile ) {\n            this.trash.push(object);\n          } else {\n            throw new Error(\"unknown type of object\");\n          }\n\n    }\n    addZombies(){\n        let position=[575,630,676];\n        let zombie1 = new Zombie(575,this);\n        let zombie2 = new Zombie(630,this);\n        let zombie3 = new Zombie(676,this);\n\n        this.zombies.push(zombie1);\n        this.zombies.push(zombie2);\n        this.zombies.push(zombie3);\n    \n    }\n    \n    addHumans(){\n      \n        const startLane =[590,680,650];\n        const minDistance = 200;\n        for(let i =0;i<Game.num_humans;i++){\n            let positionFound = false;\n            \n            while(!positionFound ){\n                const position = Math.floor(Math.random()*(10000-1500+1))+2000;\n                const y =startLane[Math.floor(Math.random()*startLane.length)];\n                const newHuman = new Human(position,y,this);\n                const overLapCheck = this.humans.some((human)=>{\n                    newHuman.isCollidedWith(human)\n                });\n                if (!overLapCheck){\n                    this.add(newHuman);\n                    positionFound=true;\n                }\n            }\n        }\n    }\n    addSetting(){\n        this.setting.push(new Setting());\n    }\n\n    moveObjects(){\n        this.humans.concat(this.trash).forEach(object =>{\n            object.move();\n        })\n        \n    }\n\n    allObjects(){\n        return [].concat(this.setting,this.humans);\n    }\n    draw(ctx){\n        // 3 human lanes, are 680,650,590\n        //zombie start lanes are 575,630,676\n        //projectile start lanes = 595,650,696\n        ctx.clearRect(0,0,Game.DIM_X,Game.DIM_Y)\n        this.setting[0].drawFrame(ctx);\n        this.humans.forEach((object)=>{\n            object.drawFrame(ctx);\n        });\n        this.zombies.forEach(zombie=>{\n            console.log(zombie.targets);\n            zombie.drawFrame(ctx);\n            // if zombie status = throw, animate drawthrowingframe, after projectile is thrown\n            //change status to not throw. to revert back to idleanimations\n            //else animate idleframe for zombie\n        });\n        this.trash.forEach(object=>{\n            object.drawFrame(ctx);\n        })\n        }\n    \n    checkLetter(letter){\n        this.humans.filter((human)=>human.pos[0]<1500).forEach(human=>{\n            human.wordCheck(letter);\n        })\n\n    }\n    triggerThrow(){\n        \n    }\n    update(){\n        this.humans.forEach(human=>{\n            human.update();\n        })\n        this.checkforDeadHumans();\n        this.checkHits();\n    }\n    // resetProjectileThrown(){\n    //     this.zombies.forEach((zombie)=>{\n    //         zombie.projectileThrown=false;\n    //     });\n    // }\n    //maybe have a total trash for each zombie to throw, so it will just throw\n    //all the trash specific for each humam\n    \n    checkforDeadHumans(){\n        this.humans.forEach(human=>{\n            if (human.status ==='dead'){\n\n                let deadHumanPosition = human.pos[1];\n                console.log(human);\n                switch (true){\n                    case(deadHumanPosition-4===676):\n                        //change status for zombie 3 \n                        if (!this.zombies[2].targets.includes(human)){\n                        this.zombies[2].targets.push(human);\n                        }\n                        console.log(this.zombies[2]);\n                        break;\n                    case(deadHumanPosition-20===630):\n                        if (!this.zombies[1].targets.includes(human)){\n                        this.zombies[1].targets.push(human);\n                        }\n                        break;\n                    case(deadHumanPosition-15===575):\n                    if (!this.zombies[0].targets.includes(human)){\n                        this.zombies[0].targets.push(human);\n                        }\n                        break;\n                }\n\n            }\n        })\n    }\n    checkHits(){\n        //check if trash hit dead human\n        for(let i =0;i<this.trash.length;i++){\n            for(let j=0;j<this.humans.length;j++){\n                const trash1 = this.trash[i];\n                const human1 = this.humans[j];\n                if(trash1.isCollidedWith(human1)&&human1.pos[0]<1500&&human1.status==='dead'){\n                    this.remove(trash1);\n                    this.remove(human1);\n                }\n            }\n        }\n    }\n\n    remove(object){\n        console.log('remove in process');\n        if (object instanceof Projectile){\n            this.trash.splice(this.trash.indexOf(object),1);\n        } else if (object instanceof Human){\n            this.humans.splice(this.humans.indexOf(object),1);\n        } else {\n            throw new Error(\"unknown type of object\");\n        }\n    }\n\n\n}\nexport default Game;","\n// let game = document.getElementById('game');\n// game.width=500;\n// game.height=500;\n// const ctx = game.getContext(\"2d\");\n// ctx.fillStyle=\"black\";\n// ctx.fillRect(0,0,500,500);\n// import wordgenerator from \"./scripts\"\nimport {getRandomWord} from './scripts/wordgenerator.js';\nimport MovingObject from './scripts/movingObject.js';\nimport Setting from './scripts/setting.js';\nimport Human from './scripts/human.js';\nimport Game from \"./scripts/game.js\"\nimport Resource from './scripts/resources.js'\nimport GameView from \"./scripts/game_view.js\"\nimport Projectile from './scripts/projectile.js'\nimport Word from './scripts/word.js';\n\nwindow.Human = Human;\nwindow.MovingObject = MovingObject;\nwindow.Setting = Setting;\nwindow.Word = Word;\ndocument.addEventListener(\"DOMContentLoaded\", () => { \n\n  \n    // const word = getRandomWord();\n    // console.log(word);\n    let canvas= document.getElementById('game');\n    const ctx = canvas.getContext(\"2d\");\n    const imageUrls = ['./images/bg.png',\n    './images/grass_15.png',\n    './images/house1.png',\n    './images/walkcyclevarious.png',\n    './images/wireframe.png'];\n    let resources = new Resource(imageUrls);\n    let setting = new Setting(ctx);\n    // setting.drawFrame(ctx);\n    canvas.width = 1500\n    canvas.height = 900\n\n    // let trash = new Projectile(ctx);\n    // trash.drawFrame(ctx);\n    \n    // setting.drawFrame(ctx);\n    // let game = new Game();\n    // let gameview = new GameView(game,ctx).start();\n    const game = new Game();\n    console.log(game);\n    new GameView(game,ctx).start();\n  \n\n    // setting.width = 1000;\n    // setting.height = 500;\n    \n    // //code to be put in game class\n    // let humans=[]\n    // let human1 = new Human(ctx);\n    // human1.drawFrame(ctx);\n  \n    // let human2 = new Human();\n    // human1.animate(ctx,5)\n    // human1.animate(ctx,5);\n    // human2.animate(ctx,5);\n  });\n","import {getRandomWord} from './wordgenerator.js';\nclass Word {\n\n    async wordCheck(){\n        let initialWord;\n        do{\n            initialWord = await getRandomWord();\n            \n        }while(initialWord.length>10);\n        return initialWord;\n    }\n\n    \n    constructor(){       \n        this.wordCheck().then(result=>{\n            this.word=result;\n        })\n\n    }\n    \n    getWord(){\n        return this.word;\n    }\n    \n}\nexport default Word;","\nclass Resources{\n    constructor(imageUrls){\n        this.resourceCache = {};\n        this.loading=[];\n        this.readyCallbacks=[];\n        imageUrls.forEach(url=>{\n            this.load(url);\n        })\n    }\n\n    load(url){\n        this._load(url);\n    }\n\n    _load(url){\n        if (this.resourceCache[url]){\n            return this.resourceCache[url];\n        } else {\n            this.loading.push(url);\n            let img = new Image();\n            img.onload = ()=> {\n                this.resourceCache[url] = img;\n\n                if (this.isReady()){\n                    this.readyCallbacks.forEach(func => {\n                        func();\n                    })\n                }\n            };\n            this.resourceCache[url] = false;\n            img.src = url; \n        }\n    }\n    get(url){\n        return this.resourceCache[url];\n    }\n\n    isReady(){\n        let ready = true;\n        for (var k in this.resourceCache){\n            if(this.resourceCache.hasOwnProperty.call(this.resourceCache,k) && !this.resourceCache[k]){\n                ready = false;\n            }\n        }\n        return ready;\n    }\n\n    onReady(func){\n        this.readyCallbacks.push(func);\n    }\n\n\n}\nexport default Resources;","\nclass GameView {\n    static alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    constructor(game,ctx){\n        this.ctx = ctx;\n        this.game = game;\n        this.lastFrameTime=0;\n        this.frameRate=12;\n        this.frameDelay = 1000/this.frameRate\n        this.index =0;\n        // document.addEventListener('keydown',event => {\n        //     //checking key pressed \n        //     console.log(event.key);\n        //     this.game.checkLetter(event.key);\n        //     //check if the event.key is equal to any of word[index]\n        //     //if equal, update the correct letter for all words currently on the screen,\n        //     // need to only check for humans position is within canvas width\n\n        // })\n        \n    }\n\n\n    start(){\n        console.log(this.game)\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    animate(currentTime=0){\n     \n     const elapsed = currentTime - this.lastFrameTime;\n        if (elapsed > this.frameDelay){\n            this.lastFrameTime=currentTime\n            this.game.moveObjects();\n            this.game.update();\n            this.game.draw(this.ctx);\n            // this.game.update();\n            // this.game.moveHumans();\n        }\n        requestAnimationFrame(this.animate.bind(this));\n    };\n   \n}\nexport default GameView;"],"names":["static","constructor","pos","speed","game","this","move","isCollidedWith","human","projectileLane","humanLane","Math","abs","console","log","getCenterX","ctx","backgroundImage","Image","imageLoaded","onload","src","drawFrame","drawImage","async","getRandomWord","response","fetch","ok","json","error","Human","MovingObject","initialWord","letters","arguments","length","undefined","word","x","y","super","startSpeed","status","setRandomWord","sprite","maxFrame","minFrame","width","height","centerX","spriteWidth","centerY","spriteHeight","person","floor","random","frame","IMAGE","getCenterY","personNum","drawWord","fillStyle","font","fillText","update","wordCheck","letter","slice","Projectile","randomIndex","dimensions","trash","url","number","rotation","rotationSpped","frameX","frameY","frames","dimX","dimY","Zombie","standingIndex","idleAnimation","targets","projectile","projectileThrown","drawThrowingFrame","drawIdleFrame","throwProjectile","targetLength","i","add","splice","throwingDimensions","dimensionX","dimensionY","throwingAnimation","throwingCol","idleDimensions","idleCol","Game","humans","zombies","setting","addHumans","addSetting","addZombies","active","time","document","addEventListener","event","key","checkLetter","object","push","Error","zombie1","zombie2","zombie3","startLane","num_humans","positionFound","position","newHuman","overLapCheck","some","Setting","moveObjects","concat","forEach","allObjects","draw","clearRect","DIM_X","DIM_Y","zombie","filter","triggerThrow","checkforDeadHumans","checkHits","deadHumanPosition","includes","j","trash1","human1","remove","indexOf","window","Word","then","result","getWord","canvas","getElementById","getContext","imageUrls","resourceCache","loading","readyCallbacks","load","_load","img","isReady","func","get","ready","k","hasOwnProperty","call","onReady","lastFrameTime","frameRate","frameDelay","index","start","requestAnimationFrame","animate","bind","currentTime"],"sourceRoot":""}