{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript_project/./src/scripts/movingObject.js","webpack://javascript_project/./src/scripts/setting.js","webpack://javascript_project/./src/scripts/wordgenerator.js","webpack://javascript_project/./src/scripts/human.js","webpack://javascript_project/./src/scripts/projectile.js","webpack://javascript_project/./src/scripts/zombie.js","webpack://javascript_project/./src/scripts/game.js","webpack://javascript_project/./src/scripts/game_view.js","webpack://javascript_project/./src/index.js","webpack://javascript_project/./src/scripts/word.js","webpack://javascript_project/./src/scripts/resources.js"],"sourcesContent":["import {dist} from './util.js';\nconst NORMAL_FAME_TIME_DELTA = 1000/60;\nclass MovingObject{\n    static humanWdith=65;\n    static trashWidth=20;\n    constructor(pos,speed,game){\n        this.pos = pos;\n        this.speed = speed;\n        this.game=game;\n\n\n    }\n    move() {\n        \n        this.pos = [this.pos[0]-this.speed,this.pos[1]];\n    }\n    getCenter(spriteWidth){\n        return this.pos[0]+Math.floor(spriteWidth/2);\n    }\n    isCollidedWith(human,width1,width2){\n        // check if projectile is in the correct lane\n        // projectile 595,650,696\n        // human start 590,650,680\n        const projectileLane = this.pos[1];\n        const humanLane = human.pos[1];\n      \n        // Define the acceptable range for the lane\n        const laneRange = 20;\n        //axis-aligned bounding box(two objects a,b)\n        //if a.x + a.width >=b.x\n        //& (a.x<=b.x+b.width)\n        //&(a.y+a.height>=b.y)\n        //a.y<=(b.y+b.height)\n        if (Math.abs(projectileLane - humanLane) <= laneRange ) {\n          const detection1 = (this.pos[0]+width1>=human.pos[0]);\n          const detection2 = (human.pos[0]+width2>=this.pos[0]);\n          if (detection1 && detection2) {\n            console.log('collision detected')\n            return true;\n          }\n        }\n      \n        return false;\n    }\n\n\n\n}\n\nexport default MovingObject","\nclass Setting {\n    constructor(ctx){\n        this.backgroundImage = new Image();\n        this.imageLoaded = false;\n        this.backgroundImage.onload =()=>{\n            \n            this.imageLoaded = true;\n            // this.drawFrame(ctx);\n        }\n        // this.houseImage =  new Image();\n        this.backgroundImage.src = './images/bg4.0.png';\n        // this.houseImage.src = './images/house1.png';\n        // this.skyImage = new Image();\n        // this.skyImage.src = './images/sky1.png'\n    }\n\n    drawFrame(ctx){\n        if (this.imageLoaded){\n            ctx.drawImage(this.backgroundImage,0,0);\n        }\n        \n        \n        // ctx.drawImage(this.houseImage,10,200,100,100);\n        // ctx.drawImage(this.skyImage,0,10,100,50);\n\n\n\n      \n        }\n    \n    \n}\n\n\n\n\n\n\nexport default Setting\n","const randomWord = 'https://api.api-ninjas.com/v1/randomword'\n\n\nexport async function getRandomWord(){\n  try {\n      const response = await fetch(\"https://random-word-api.vercel.app/api?words=1\")\n      if (response.ok) {\n        const result = await response.json();\n        return result[0];\n      } else {\n        throw response\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n// export async function getRandomWord(){\n//     try {\n//         const response = await fetch(\"https://api.api-ninjas.com/v1/randomword\",{\n//     method: 'GET',\n//     headers: { 'X-Api-Key': '/UnQYwpt2huxOYVHDrgpMQ==JFZmsclMm7gqLBGn'},\n//     contentType: 'application/json',\n//     success: function(result) {\n//         console.log(result);\n//     }})\n//         if (response.ok) {\n//           const result = await response.json();\n//           const word = result.word;\n//           return word\n//         } else {\n//           throw response\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     }\n","import MovingObject from './movingObject.js';\nimport * as Util from './util.js';\nimport Resources from './resources.js';\nimport Word from './word.js';\nimport {getRandomWord} from './wordgenerator.js';\n\nclass Human extends MovingObject {\n    static IMAGE = './images/walkcyclevarious.png';\n    static start =[680,650,590];\n    static startSpeed=.5;\n    static frame = 9;\n    static spriteHeight = 60;\n    static spriteWidth = 65;\n    // need to set up 3 random positions for a human, \n    async setRandomWord(letters=5){\n        let initialWord;\n        do{\n            initialWord = await getRandomWord();\n            \n        }while(initialWord.length > letters);\n        this.word=initialWord;\n    }\n\n    constructor (x,y,game){\n        const speed = Human.startSpeed\n    \n        super([x,y],speed,game);\n        this.targeted=false;\n        this.status = 'alive';\n        this.setRandomWord();\n        this.sprite = new Image();\n        this.maxFrame=11;\n        this.minFrame=9;\n        this.width=65;\n        this.height=60;\n        this.centerX = this.pos[0]+Human.spriteWidth/2;\n        this.centerY = this.pos[1]+Human.spriteHeight/2;\n        this.person = Math.floor(Math.random()*7)+1;\n        this.spriteHeight = Human.spriteHeight*this.person;\n        this.frame = Human.frame;\n        this.imageLoaded = false;\n        this.sprite.onload= ()=>{\n            this.imageLoaded=true;\n            // this.drawFrame(ctx);\n        };\n        this.sprite.src = Human.IMAGE;\n\n    }\n\n    getCenterX(){\n        return this.pos[0]+65/2;\n    }\n    getCenterY(){\n        return this.pos[1]+60/2;\n    }\n   drawFrame(ctx) {\n        let [x,y] = this.pos;\n        let personNum = this.person;\n        let frame = this.frame;\n        if (this.imageLoaded ){\n            \n            ctx.drawImage(this.sprite,Human.spriteWidth*frame,\n                Human.spriteHeight*personNum,\n                Human.spriteWidth,\n                Human.spriteHeight,\n                x,\n                y,\n                70,\n                70);\n            this.drawWord(ctx);\n            \n            \n        }\n        \n    }\n\n    drawWord(ctx){\n\n      \n        ctx.fillStyle='white';\n        ctx.font = '20px arial';\n        ctx.fillText(this.word,this.pos[0],this.pos[1]+5);\n    }\n    \n    update(){\n        if (this.frame<this.maxFrame) this.frame++;\n        else this.frame = this.minFrame;\n    }\n\n    move(){\n        let [x,y] = this.pos;\n        if (x>100) this.pos = [this.pos[0]-10,this.pos[1]];\n    }\n\n\n    wordCheck(letter){\n\n        // if (word===this.word.word){\n        //     //trigger death event\n        // } \n            if (letter===this.word[0]){\n                this.word = this.word.slice(1);\n              \n            }\n            if(!this.word.length){\n                this.status='dead';\n                console.log(this);\n            }\n        }\n        \n    \n\n\n   \n\n  \n}\n\nexport default Human;\n\n","import MovingObject from './movingObject.js';\n\nclass Projectile extends MovingObject {\n    static spriteWidth = 20;\n    static spriteHeight = 20;\n    static url = './images/littered_dungeon.png';\n    static frames = [[3,4],[30,4],[60,4],[90,2]];\n    static dimensions = [[20,20],[20,20],[20,20],[30,30]];\n    constructor(y,game){\n        let pos = [100+50,y+20];\n        let speed = 20;\n        super(pos,speed,game)\n        this.randomIndex =Math.floor(Math.random()*4);\n        this.width = Projectile.dimensions[this.randomIndex][0];\n        this.height = Projectile.dimensions[this.randomIndex][1];\n        this.trash = new Image();\n        this.imageLoaded=false \n        this.trash.onload=()=>{\n            this.imageLoaded = true;\n\n        };\n        this.trash.src = Projectile.url;\n        this.number = Math.floor(Math.random()*3)+1;\n      \n    }\n    getCenterX(){\n        return this.pos[0]+20/2;\n    }\n    getCenterY(){\n        return this.pos[1]+20/2;\n    }\n    update(){\n        this.rotation+=this.rotationSpped;\n    }\n    drawFrame(ctx){\n        \n        let [frameX,frameY] = [Projectile.frames[this.randomIndex][0],Projectile.frames[this.randomIndex][1]];\n        let [dimX,dimY] = [Projectile.dimensions[this.randomIndex][0],Projectile.dimensions[this.randomIndex][1]];\n        if(this.imageLoaded){\n            \n            // ctx.drawImage(this.trash,3,4,20,20,this.pos[0],this.pos[1],20,20);\n            ctx.drawImage(this.trash,frameX,frameY,dimX,dimY,this.pos[0],this.pos[1],dimX,dimY);\n            // ctx.rotate(-1);\n            // ctx.drawImage(this.trash,0,0);\n        }\n    }\n    move(){\n        this.pos = [this.pos[0]+40,this.pos[1]];\n    }\n    \n\n\n}\nexport default Projectile;","import Projectile from \"./projectile\";\nimport Game from './game.js';\nclass Zombie{\n    static url = './images/zombie.png';\n    static throwingAnimation=[3,63,130,205,352,407,460,63]; \n    static throwingDimensions=[[50,70],[50,70],[50,70],[50,70],[50,70],[50,70],[68,70],[50,70]];\n    static idleDimensions=[[47,70],[47,70],[47,70],[44,70],[44,70],[44,70]];\n    static idleAnimation=[3,53,102,150,196,243];\n    static idleCol=163;\n    static throwingCol = 320;\n    static idleRow = [229];\n    constructor(y,game){\n        //y position is dependent on zombie lane\n        this.standingIndex=0;\n        this.x = 100;\n        this.y = y;\n        this.game = game;\n        this.sprite = new Image();\n        this.imageLoaded=false;\n        this.sprite.onload=()=>{\n            this.imageLoaded=true;\n        }\n        this.sprite.src = Zombie.url;\n        this.idleAnimation=[1,2,3,4,5,6];\n        this.targets=[];\n        this.killed=[];\n        this.projectile=false;\n        this.projectileThrown=false;\n\n    }\n\n    drawFrame(ctx){\n        if (this.targets.every((target=>target.targeted===true))|| this.targets.length===0){\n            this.drawIdleFrame(ctx);\n        }else if(this.targets.some(target=>target.targeted===false)){\n            console.log(this.targets);\n            console.log(this);\n            this.drawThrowingFrame(ctx);\n        } else{\n            this.drawIdleFrame(ctx);\n        }\n    }\n    throwProjectile(){\n        console.log('throwing');\n        if (this.targets.length > 0){\n            const target = this.targets.shift();\n            this.killed.push(target);\n            this.targets.shift();\n            if(!target.targeted){\n            const trash = new Projectile(this.y,this.game);\n            this.game.add(trash);\n            target.targeted=true;\n            }\n        }\n       \n    }\n    drawThrowingFrame(ctx){\n        let [frameX,frameY] = [Zombie.throwingDimensions[this.standingIndex][0],Zombie.throwingDimensions[this.standingIndex][1]];\n        let [dimensionX, dimensionY] =[Zombie.throwingAnimation[this.standingIndex],Zombie.throwingCol];\n        if(this.imageLoaded){\n            this.standingIndex++;\n            ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n            // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n            \n            if(this.standingIndex>7) {\n                this.throwProjectile();\n                this.standingIndex = 0;\n               }\n            }\n        }\n    drawIdleFrame(ctx){\n        let [frameX,frameY] = [Zombie.idleDimensions[this.standingIndex][0],Zombie.idleDimensions[this.standingIndex][1]]\n        let [dimensionX, dimensionY] =[Zombie.idleAnimation[this.standingIndex],Zombie.idleCol];\n        if(this.imageLoaded){\n                this.standingIndex++;\n                ctx.drawImage(this.sprite,dimensionX,dimensionY,frameX,frameY,this.x,this.y,frameX,frameY);\n                // ctx.drawImage(this.sprite,63,320,50,70,this.x,this.y,50,70);\n           \n               if(this.standingIndex>5) this.standingIndex = 0;\n            }\n    }\n    \n\n}\n\nexport default Zombie;","import Human from './human.js';\nimport Setting from './setting.js';\nimport Zombie from './zombie.js';\nimport Projectile from './projectile.js';\nclass Game {\n    static num_humans=20;\n    static DIM_X = 1500;\n    static DIM_Y = 900;\n    constructor(){\n        this.humans = [];\n        this.zombies=[];\n        this.setting = [];\n        this.humanTargets=[];\n        this.addHumans();\n        this.addSetting();\n        this.addZombies();\n        this.trash=[];\n        this.active = false;\n        this.time = 0;\n        document.addEventListener('keydown',event => {\n            //checking key pressed \n           \n            this.checkLetter(event.key);\n            //check if the event.key is equal to any of word[index]\n            //if equal, update the correct letter for all words currently on the screen,\n            // need to only check for humans position is within canvas width\n\n        })\n\n    }\n\n    \n    add(object){\n        if (object instanceof Human) {\n            this.humans.push(object);\n          } else if (object instanceof Projectile ) {\n            this.trash.push(object);\n          } else {\n            throw new Error(\"unknown type of object\");\n          }\n\n    }\n    addZombies(){\n        let position=[575,630,676];\n        let zombie1 = new Zombie(575,this);\n        let zombie2 = new Zombie(630,this);\n        let zombie3 = new Zombie(676,this);\n\n        this.zombies.push(zombie1);\n        this.zombies.push(zombie2);\n        this.zombies.push(zombie3);\n    \n    }\n    \n    addHumans(){\n      \n        const startLane =[590,680,650];\n        const minDistance = 200;\n        for(let i =0;i<Game.num_humans;i++){\n            let positionFound = false;\n            \n            while(!positionFound ){\n                const position = Math.floor(Math.random()*(10000-1500+1))+2000;\n                const y =startLane[Math.floor(Math.random()*startLane.length)];\n                const newHuman = new Human(position+100,y,this);\n                const overLapCheck = this.humans.some((human)=>{\n                    newHuman.isCollidedWith(human,65,65)\n                });\n                if (!overLapCheck){\n                    this.add(newHuman);\n                    positionFound=true;\n                }\n            }\n        }\n    }\n    addSetting(){\n        this.setting.push(new Setting());\n    }\n\n    moveObjects(){\n        this.humans.concat(this.trash).forEach(object =>{\n            object.move();\n        })\n        \n    }\n\n    allObjects(){\n        return [].concat(this.setting,this.humans);\n    }\n    draw(ctx){\n        // 3 human lanes, are 680,650,590\n        //zombie start lanes are 575,630,676\n        //projectile start lanes = 595,650,696\n        ctx.clearRect(0,0,Game.DIM_X,Game.DIM_Y)\n        this.setting[0].drawFrame(ctx);\n        this.humans.forEach((object)=>{\n            object.drawFrame(ctx);\n        });\n        this.zombies.forEach(zombie=>{\n            zombie.drawFrame(ctx);\n            // if zombie status = throw, animate drawthrowingframe, after projectile is thrown\n            //change status to not throw. to revert back to idleanimations\n            //else animate idleframe for zombie\n        });\n        this.trash.forEach(object=>{\n            object.drawFrame(ctx);\n        })\n        }\n    \n    checkLetter(letter){\n        this.humans.filter((human)=>human.pos[0]<1500).forEach(human=>{\n            human.wordCheck(letter);\n        })\n\n    }\n    triggerThrow(){\n        \n    }\n    update(){\n        this.humans.forEach(human=>{\n            human.update();\n        })\n        this.checkforDeadHumans();\n        this.assignHumans();\n        this.checkHits();\n    }\n    // resetProjectileThrown(){\n    //     this.zombies.forEach((zombie)=>{\n    //         zombie.projectileThrown=false;\n    //     });\n    // }\n    //maybe have a total trash for each zombie to throw, so it will just throw\n    //all the trash specific for each humam\n    \n    checkforDeadHumans(){\n        this.humans.forEach(human=>{\n            if (human.status ==='dead'){\n                this.humanTargets.push(human);\n                }\n\n            });\n        }\n        assignHumans(){\n            for(let i =0;i<this.humanTargets.length;i++){\n            let deadHuman =this.humanTargets[i];\n            let deadHumanPosition = this.humanTargets[i].pos[1];\n            switch (true){\n                case(deadHumanPosition-4===676):\n                    //change status for zombie 3 \n                    if (!this.zombies[2].targets.includes(deadHuman)&&!this.zombies[2].killed.includes(deadHuman)){\n                    this.zombies[2].targets.push(deadHuman);\n                    this.zombies[2].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-20===630):\n                    if (!this.zombies[1].targets.includes(deadHuman)&&!this.zombies[1].killed.includes(deadHuman)){\n                    this.zombies[1].targets.push(deadHuman);\n                    this.zombies[1].projectile=true;\n                    }\n                    break;\n                case(deadHumanPosition-15===575):\n                if (!this.zombies[0].targets.includes(deadHuman)&&!this.zombies[0].killed.includes(deadHuman)){\n                    this.zombies[0].targets.push(deadHuman);\n                    this.zombies[0].projectile=true;\n                    }\n                    break;\n            }\n            }\n        }\n    \n    \n    checkHits(){\n        //check if trash hit dead human\n        for(let i =0;i<this.trash.length;i++){\n            for(let j=0;j<this.humans.length;j++){\n                const trash1 = this.trash[i];\n                const human1 = this.humans[j];\n                if (trash1 && human1){\n                    if(trash1.isCollidedWith(human1,20,65) && human1.pos[0]<1500&&human1.status==='dead'){\n                        this.remove(trash1);\n                        this.remove(human1);\n                    }\n                }\n            }\n        }\n    }\n\n    remove(object){\n\n        if (object instanceof Projectile){\n            this.trash.splice(this.trash.indexOf(object),1);\n        } else if (object instanceof Human){\n            this.humans.splice(this.humans.indexOf(object),1);\n        } else {\n            throw new Error(\"unknown type of object\");\n        }\n    }\n\n    getSetting(){\n        return this.setting[0];\n    }\n}\n\nexport default Game;","\nclass GameView {\n    static alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    constructor(game,ctx,canvas){\n        this.canvas=canvas;\n        this.ctx = ctx;\n        this.game = game;\n        this.lastFrameTime=0;\n        this.frameRate=10;\n        this.frameDelay = 1000/this.frameRate\n        this.index =0;\n        this.menuImage=new Image();\n        this.imageLoaded=false;\n        this.menuKeys=[];\n        this.menuImage.onload=()=>{\n            this.imageLoaded=true;\n            this.startMenu();\n        }\n        this.menuImage.src = './images/bg4.0.png';\n        // document.addEventListener('keydown',event => {\n        //     //checking key pressed \n        //     console.log(event.key);\n        //     this.game.checkLetter(event.key);\n        //     //check if the event.key is equal to any of word[index]\n        //     //if equal, update the correct letter for all words currently on the screen,\n        //     // need to only check for humans position is within canvas width\n\n        // })\n        \n    }\n\n    startMenu(){\n        this.ctx.clearRect(0,0,1500,900);\n        console.log(this.menuImage);\n        console.log(this.imageLoaded);\n        if(this.imageLoaded) this.ctx.drawImage(this.menuImage,0,0);\n        this.ctx.drawImage(this.menuImage, 0, 0);\n        const start = document.getElementById('start');\n        const startMenuEvent = document.addEventListener('keydown', (event)=>{\n        if (event.key ==='Backspace'){\n            this.menuKeys.pop();\n        } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n            this.menuKeys.push(event.key.toLowerCase());\n        };\n        let letters = document.getElementsByClassName('startLetters');\n        for(let i =0;i<letters.length;i++){\n            let letter=letters[i].innerText;\n            console.log(letter);\n            if (letter===this.menuKeys[i]){\n                letters[i].classList.add('typed');\n            } else {\n                letters[i].classList.remove('typed');\n            }\n        }\n        let check = document.getElementsByClassName('typed');\n        if(check.length===5) {\n            setTimeout(()=>this.start(),1000);\n        };\n        \n        // Add decorations or text to the menu\n        // let title = document.createElement('h1');\n        // title.innerText='ahhh urRrRR Orrr!!'\n        // title.setAttribute('id','myTitle');\n        })\n    }\n    startMenuEvent(event){\n        if (event.key ==='Backspace'){\n            this.menuKeys.pop();\n        } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n            this.menuKeys.push(event.key.toLowerCase());\n        };\n        let letters = document.getElementsByClassName('startLetters');\n        for(let i =0;i<letters.length;i++){\n            let letter=letters[i].innerText;\n            console.log(letter);\n            if (letter===this.menuKeys[i]){\n                letters[i].classList.add('typed');\n            } else {\n                letters[i].classList.remove('typed');\n            }\n        }\n        let check = document.getElementsByClassName('typed');\n        if(check.length===5) {\n            setTimeout(()=>this.startGame(),1000);\n        }\n    }\n    modeSelection(){\n        this.menuKeys=[];\n        let navbar = document.getElementById('navBar')\n        navbar.style.display='none'\n        let modes = document.getElementById('modeSelection')\n        modes.style.display='block';\n        document.removeEventListener('keydown',this.startMenuEvent);\n        document.addEventListener('keydown',event=>{\n            if (event.key ==='Backspace'){\n                this.menuKeys.pop();\n            } else if(GameView.alphabet.includes(event.key.toUpperCase())){\n                this.menuKeys.push(event.key.toLowerCase());\n            };\n            \n            let sletters = document.getElementsByClassName('sLetters');\n            let aletters = document.getElementsByClassName('aLetters');\n            console.log(this.menuKeys);\n            for(let i=0;i<this.menuKeys.length;i++){\n                if (this.menuKeys[i]===sletters[i].innerText){\n                    sletters[i].classList.add('typed');\n                } else {\n                    sletters[i].classList.remove('typed');\n                }\n                if(this.menuKeys[i]===aletters[i].innerText){\n                    aletters[i].classList.add('typed');\n                }else {\n                    aletters[i].classList.remove('typed');\n                }\n            }\n            let check = document.getElementsByClassName('typed');\n            if(check.length===6) {\n                console.log(arcade);\n            } else if(check.length===8){\n                console.log(survival);\n            }\n        })\n    }\n    start(){\n        let navbar = document.getElementById('navBar')\n        let title = document.getElementById('myTitle')\n        navbar.style.display='none'\n        title.style.display='none'\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n    animate(currentTime=0){\n     \n     const elapsed = currentTime - this.lastFrameTime;\n        if (elapsed > this.frameDelay){\n            this.lastFrameTime=currentTime\n            this.game.moveObjects();\n            this.game.update();\n            this.game.draw(this.ctx);\n            // this.game.update();\n            // this.game.moveHumans();\n        }\n        requestAnimationFrame(this.animate.bind(this));\n    };\n   \n}\nexport default GameView;","\n// let game = document.getElementById('game');\n// game.width=500;\n// game.height=500;\n// const ctx = game.getContext(\"2d\");\n// ctx.fillStyle=\"black\";\n// ctx.fillRect(0,0,500,500);\n// import wordgenerator from \"./scripts\"\nimport {getRandomWord} from './scripts/wordgenerator.js';\nimport MovingObject from './scripts/movingObject.js';\nimport Setting from './scripts/setting.js';\nimport Human from './scripts/human.js';\nimport Game from \"./scripts/game.js\"\nimport Resource from './scripts/resources.js'\nimport GameView from \"./scripts/game_view.js\"\nimport Projectile from './scripts/projectile.js'\nimport Word from './scripts/word.js';\n\nwindow.Human = Human;\nwindow.MovingObject = MovingObject;\nwindow.Setting = Setting;\nwindow.Word = Word;\ndocument.addEventListener(\"DOMContentLoaded\", () => { \n\n  \n    // const word = getRandomWord();\n    // console.log(word);\n    let canvas= document.getElementById('game');\n    const ctx = canvas.getContext(\"2d\");\n    const imageUrls = ['./images/bg.png',\n    './images/grass_15.png',\n    './images/house1.png',\n    './images/walkcyclevarious.png',\n    './images/wireframe.png'];\n    let resources = new Resource(imageUrls);\n    let setting = new Setting(ctx);\n    // setting.drawFrame(ctx);\n    canvas.width = 1500\n    canvas.height = 900\n\n    // let trash = new Projectile(ctx);\n    // trash.drawFrame(ctx);\n    \n    // setting.drawFrame(ctx);\n    // let game = new Game();\n    // let gameview = new GameView(game,ctx).start();\n    const game = new Game();\n    console.log(game);\n    new GameView(game,ctx,canvas);\n  \n\n    // setting.width = 1000;\n    // setting.height = 500;\n    \n    // //code to be put in game class\n    // let humans=[]\n    // let human1 = new Human(ctx);\n    // human1.drawFrame(ctx);\n  \n    // let human2 = new Human();\n    // human1.animate(ctx,5)\n    // human1.animate(ctx,5);\n    // human2.animate(ctx,5);\n  });\n","import {getRandomWord} from './wordgenerator.js';\nclass Word {\n\n    async wordCheck(){\n        let initialWord;\n        do{\n            initialWord = await getRandomWord();\n            \n        }while(initialWord.length>10);\n        return initialWord;\n    }\n\n    \n    constructor(){       \n        this.wordCheck().then(result=>{\n            this.word=result;\n        })\n\n    }\n    \n    getWord(){\n        return this.word;\n    }\n    \n}\nexport default Word;","\nclass Resources{\n    constructor(imageUrls){\n        this.resourceCache = {};\n        this.loading=[];\n        this.readyCallbacks=[];\n        imageUrls.forEach(url=>{\n            this.load(url);\n        })\n    }\n\n    load(url){\n        this._load(url);\n    }\n\n    _load(url){\n        if (this.resourceCache[url]){\n            return this.resourceCache[url];\n        } else {\n            this.loading.push(url);\n            let img = new Image();\n            img.onload = ()=> {\n                this.resourceCache[url] = img;\n\n                if (this.isReady()){\n                    this.readyCallbacks.forEach(func => {\n                        func();\n                    })\n                }\n            };\n            this.resourceCache[url] = false;\n            img.src = url; \n        }\n    }\n    get(url){\n        return this.resourceCache[url];\n    }\n\n    isReady(){\n        let ready = true;\n        for (var k in this.resourceCache){\n            if(this.resourceCache.hasOwnProperty.call(this.resourceCache,k) && !this.resourceCache[k]){\n                ready = false;\n            }\n        }\n        return ready;\n    }\n\n    onReady(func){\n        this.readyCallbacks.push(func);\n    }\n\n\n}\nexport default Resources;"],"names":["static","constructor","pos","speed","game","this","move","getCenter","spriteWidth","Math","floor","isCollidedWith","human","width1","width2","projectileLane","humanLane","abs","detection1","detection2","console","log","ctx","backgroundImage","Image","imageLoaded","onload","src","drawFrame","drawImage","async","getRandomWord","response","fetch","ok","json","error","Human","MovingObject","initialWord","letters","arguments","length","undefined","word","x","y","super","startSpeed","targeted","status","setRandomWord","sprite","maxFrame","minFrame","width","height","centerX","centerY","spriteHeight","person","random","frame","IMAGE","getCenterX","getCenterY","personNum","drawWord","fillStyle","font","fillText","update","wordCheck","letter","slice","Projectile","randomIndex","dimensions","trash","url","number","rotation","rotationSpped","frameX","frameY","frames","dimX","dimY","Zombie","standingIndex","idleAnimation","targets","killed","projectile","projectileThrown","every","target","drawIdleFrame","some","drawThrowingFrame","throwProjectile","shift","push","add","throwingDimensions","dimensionX","dimensionY","throwingAnimation","throwingCol","idleDimensions","idleCol","Game","humans","zombies","setting","humanTargets","addHumans","addSetting","addZombies","active","time","document","addEventListener","event","checkLetter","key","object","Error","zombie1","zombie2","zombie3","startLane","i","num_humans","positionFound","position","newHuman","overLapCheck","Setting","moveObjects","concat","forEach","allObjects","draw","clearRect","DIM_X","DIM_Y","zombie","filter","triggerThrow","checkforDeadHumans","assignHumans","checkHits","deadHuman","deadHumanPosition","includes","j","trash1","human1","remove","splice","indexOf","getSetting","GameView","canvas","lastFrameTime","frameRate","frameDelay","index","menuImage","menuKeys","startMenu","getElementById","pop","alphabet","toUpperCase","toLowerCase","getElementsByClassName","innerText","classList","setTimeout","start","startMenuEvent","startGame","modeSelection","style","display","removeEventListener","sletters","aletters","check","arcade","survival","navbar","title","requestAnimationFrame","animate","bind","currentTime","window","Word","then","result","getWord","getContext","imageUrls","resourceCache","loading","readyCallbacks","load","_load","img","isReady","func","get","ready","k","hasOwnProperty","call","onReady"],"sourceRoot":""}